// listener's C4 decompiler

void main() {
    l_2 = 1;
    l_3 = 134;
    l_4 = 134;
    l_5 = 1;
    l_6 = 1;
    l_7 = 1;
    l_8 = 134;
    l_9 = 1;
    l_A = 12;
    l_B = 12;
    l_E = 0.001;
    l_11 = -1;
    l_12 = "NULL";
    l_15 = 3;
    l_16 = 0.0;
    l_1A = -0.0375;
    l_1B = 0.17;
    l_1E = 80.0;
    l_1F = 140.0;
    l_20 = 180.0;
    l_28 = 1;
    l_29 = 65;
    l_2A = 49;
    l_2B = 64;
    l_33 = -0.05;
    l_34 = 0.9200000166893;
    l_35 = 1.94;
    l_36 = 2.99;
    l_37 = 3.7;
    l_3F = 1000;
    l_40 = 3333;
    l_41 = 0.0;
    l_48 = 1;
    GAMEPLAY::NETWORK_SET_SCRIPT_IS_SAFE_FOR_NETWORK_GAME();
    if (PLAYER::HAS_FORCE_CLEANUP_OCCURRED(32)) {
        SCRIPT::TERMINATE_THIS_THREAD();
    }
    l_3A = GAMEPLAY::GET_GAME_TIMER();
    l_43 = 0;
    sub_8d5f(l_44);
    sub_8d35();
    sub_8cf1(&g_270ECA);
    sub_8cd5(&g_270ECA, 1);
    sub_8c98(&l_45);
    while (1) {
        if (g_6311 != l_43) {
            if ((l_43 == 0) && (g_6311 != 0)) {
                if (GAMEPLAY::IS_PS3_VERSION() || GAMEPLAY::IS_ORBIS_VERSION()) {
                    sub_8c81("CHEAT_TROPHIE", -1);
                } else { 
                    sub_8c81("CHEAT_ACHIEVE", -1);
                }
            }
            if ((l_43 != 0) && (g_6311 == 0)) {}
        }
        l_43 = g_6311;
        if (!sub_8c73(14)) {
            if (!PLAYER::HAS_ACHIEVEMENT_BEEN_PASSED(24)) {
                sub_8976();
            }
            if (!PLAYER::HAS_ACHIEVEMENT_BEEN_PASSED(25)) {
                sub_88d2();
            }
            if (g_6224) {
                if (!PLAYER::HAS_ACHIEVEMENT_BEEN_PASSED(12)) {
                    v_2 = sub_783b(1);
                    if (v_2 > 0) {
                        sub_77ea(12, v_2);
                        STATS::STAT_SET_INT(0x7d7b6bd9, v_2, 1);
                    }
                    if (v_2 >= 70) {
                        sub_75c7(12, 1);
                    }
                }
                g_6224 = 0;
            }
            if (ENTITY::DOES_ENTITY_EXIST(PLAYER::PLAYER_PED_ID())) {
                if (!ENTITY::IS_ENTITY_DEAD(PLAYER::PLAYER_PED_ID())) {
                    l_44 += 1;
                    if (GAMEPLAY::GET_GAME_TIMER() > l_3A) {
                        sub_7126(0);
                        l_3A = GAMEPLAY::GET_GAME_TIMER() + l_3F;
                    }
                    if (GAMEPLAY::GET_GAME_TIMER() > l_3B) {
                        if ((!PLAYER::HAS_ACHIEVEMENT_BEEN_PASSED(14)) || (l_42 == 1)) {
                            if (sub_70fa(53)) {
                                sub_7082();
                            }
                        }
                        l_3B = GAMEPLAY::GET_GAME_TIMER() + l_40;
                    }
                }
            }
            sub_6ebe(&g_270ECA);
            sub_22c();
        } else { 
            sub_6ebe(&g_270ECA);
            sub_22c();
        }
        SYSTEM::WAIT(0);
    }
}

void sub_22c() {
    if (!sub_6eb0(&g_270ECA)) {
        return ;
    }
    if (!is_in_transition) {
        if (l_4A) {
            l_4A = 0;
        }
        return ;
    }
    if (!sub_6e70()) {
        return ;
    }
    if (l_48) {
        if (!sub_6de1(3, -1)) {
            return ;
        }
        if (!sub_6de1(5, -1)) {
            return ;
        }
    }
    if (l_4A) {
        return ;
    }
    v_2 = SOCIALCLUB::_225798743970412B(&v_3);
    if ((v_3 == -1) && (l_49 == 0)) {}
    if (v_2 && (v_3 == 0)) {
        sub_6d7c();
        l_4A = 1;
    } else { 
        sub_2bc();
    }
}

void sub_2bc() {
    if (!PLAYER::HAS_ACHIEVEMENT_BEEN_PASSED(33)) {
        if (sub_6d34()) {
            sub_75c7(33, 1);
        }
    }
    if (!PLAYER::HAS_ACHIEVEMENT_BEEN_PASSED(29)) {
        if (sub_6c8d(&l_45) > 5.0) {
            sub_be0(PLAYER::PLAYER_PED_ID());
            sub_8c98(&l_45);
        }
    }
    v_2 = sub_b0d(sub_bcc(-1), 0);
    if (v_2 >= 100) {
        if (!PLAYER::HAS_ACHIEVEMENT_BEEN_PASSED(36)) {
            sub_75c7(36, 1);
        }
    }
    if (v_2 >= 50) {
        if (!PLAYER::HAS_ACHIEVEMENT_BEEN_PASSED(35)) {
            sub_75c7(35, 1);
        }
    }
    if (v_2 >= 25) {
        if (!PLAYER::HAS_ACHIEVEMENT_BEEN_PASSED(34)) {
            sub_75c7(34, 1);
        }
    }
    if (!PLAYER::HAS_ACHIEVEMENT_BEEN_PASSED(37)) {
        sub_a77(0);
    }
    if (!PLAYER::HAS_ACHIEVEMENT_BEEN_PASSED(38)) {
        if (sub_a59(0xb261b07a) >= 5) {
            sub_75c7(38, 1);
        }
    }
    if (!PLAYER::HAS_ACHIEVEMENT_BEEN_PASSED(39)) {
        if (sub_a2d(48, -1) >= 10) {
            sub_75c7(39, 1);
        }
    }
    if (!PLAYER::HAS_ACHIEVEMENT_BEEN_PASSED(40)) {
        if (sub_a2d(52, -1) > 0) {
            sub_75c7(40, 1);
        }
    }
    if (!PLAYER::HAS_ACHIEVEMENT_BEEN_PASSED(41)) {
        if (GAMEPLAY::IS_BIT_SET(g_258209._f81D._f12, 1)) {
            sub_75c7(41, 1);
        }
    }
    if (!PLAYER::HAS_ACHIEVEMENT_BEEN_PASSED(43)) {
        if (sub_9fb(745, -1, 0) >= 30) {
            sub_75c7(43, 1);
        }
    }
    if (!PLAYER::HAS_ACHIEVEMENT_BEEN_PASSED(44)) {
        if (sub_a2d(14, -1) >= 20) {
            sub_75c7(44, 1);
        }
    }
    if (!PLAYER::HAS_ACHIEVEMENT_BEEN_PASSED(45)) {
        sub_901(0);
    }
    if (!PLAYER::HAS_ACHIEVEMENT_BEEN_PASSED(48)) {
        if (sub_546(11, -1, -1)) {
            sub_75c7(48, 1);
        }
    }
    if (!PLAYER::HAS_ACHIEVEMENT_BEEN_PASSED(49)) {
        sub_45f(0);
    }
}

auto sub_45f(auto a_0) {
    if (!sub_6e70()) {
        return 0;
    }
    if (!is_in_transition) {
        return 0;
    }
    if (PLAYER::HAS_ACHIEVEMENT_BEEN_PASSED(49)) {
        return 0;
    }
    if (a_0 == 1) {}
    if (!sub_4da(100, -1)) {
        if (a_0 == 1) {}
        return 0;
    }
    if (!sub_4da(102, -1)) {
        if (a_0 == 1) {}
        return 0;
    }
    if (!sub_4da(101, -1)) {
        if (a_0 == 1) {}
        return 0;
    }
    sub_75c7(49, 1);
    return 1;
}

auto sub_4da(auto a_0, auto a_1) {
    v_4 = g_25F257[a_0/*5*/][sub_506(a_1)/*1*/];
    if (STATS::STAT_GET_BOOL(v_4, &v_5, -1)) {
        return v_5;
    }
    return 0;
}

auto sub_506(auto a_0) {
    v_3 = a_0;
    if (v_3 == -1) {
        v_4 = sub_53a();
        if (v_4 > -1) {
            g_25A2B7 = 0;
            v_3 = v_4;
        } else { 
            v_3 = 0;
            g_25A2B7 = 1;
        }
    }
    return v_3;
}

auto sub_53a() {
    return g_1407EA;
}

auto sub_546(auto a_0, auto a_1, auto a_2) {
    v_5 = 0;
    if (a_1 == -1) {
        a_1 = sub_53a();
    }
    v_6 = sub_73b(a_0, a_1);
    v_7 = sub_583(a_0);
    if (0 != v_6) {
        v_5 = STATS::STAT_GET_BOOL_MASKED(v_6, v_7, a_2);
    }
    return v_5;
}

auto sub_583(auto a_0) {
    v_3 = 0;
    if ((a_0 >= 0) && (a_0 < 192)) {
        v_3 = (a_0 - 0) - (STATS::_F4D8E7AC2A27758C(a_0 - 0) * 64);
    } else if ((a_0 >= 192) && (a_0 < 384)) {
        v_3 = (a_0 - 192) - (STATS::_F4D8E7AC2A27758C(a_0 - 192) * 64);
    } else if ((a_0 >= 513) && (a_0 < 705)) {
        v_3 = (a_0 - 513) - (STATS::_F4D8E7AC2A27758C(a_0 - 513) * 64);
    } else if ((a_0 >= 705) && (a_0 < 1281)) {
        v_3 = (a_0 - 705) - (STATS::_F4D8E7AC2A27758C(a_0 - 705) * 64);
    } else if ((a_0 >= 2919) && (a_0 < 3111)) {
        v_3 = (a_0 - 2919) - (STATS::_F4D8E7AC2A27758C(a_0 - 2919) * 64);
    } else if ((a_0 >= 3111) && (a_0 < 3879)) {
        v_3 = (a_0 - 3111) - (STATS::_F4D8E7AC2A27758C(a_0 - 3111) * 64);
    } else if ((a_0 >= 4335) && (a_0 < 4399)) {
        v_3 = (a_0 - 4335) - (STATS::_F4D8E7AC2A27758C(a_0 - 4335) * 64);
    } else if ((a_0 >= 4207) && (a_0 < 4335)) {
        v_3 = (a_0 - 4207) - (STATS::_F4D8E7AC2A27758C(a_0 - 4207) * 64);
    } else if ((a_0 >= 6029) && (a_0 < 6413)) {
        v_3 = (a_0 - 6029) - (STATS::_F4D8E7AC2A27758C(a_0 - 6029) * 64);
    } else if ((a_0 >= 7385) && (a_0 < 7449)) {
        v_3 = (a_0 - 7385) - (STATS::_F4D8E7AC2A27758C(a_0 - 7385) * 64);
    }
    return v_3;
}

auto sub_73b(auto a_0, auto a_1) {
    if (a_1 == -1) {
        a_1 = sub_53a();
    }
    v_4 = 0;
    if ((a_0 >= 0) && (a_0 < 192)) {
        v_4 = STATS::_80C75307B1C42837(a_0 - 0, 0, 1, a_1);
    } else if ((a_0 >= 192) && (a_0 < 384)) {
        v_4 = STATS::_80C75307B1C42837(a_0 - 192, 1, 1, a_1);
    } else if ((a_0 >= 513) && (a_0 < 705)) {
        v_4 = STATS::_80C75307B1C42837(a_0 - 513, 0, 0, 0);
    } else if ((a_0 >= 705) && (a_0 < 1281)) {
        v_4 = STATS::_80C75307B1C42837(a_0 - 705, 1, 0, 0);
    } else if ((a_0 >= 2919) && (a_0 < 3111)) {
        v_4 = STATS::_C4BB08EE7907471E(a_0 - 2919, 0, 0, 0);
    } else if ((a_0 >= 3111) && (a_0 < 3879)) {
        v_4 = STATS::_C4BB08EE7907471E(a_0 - 3111, 0, 1, a_1);
    } else if ((a_0 >= 4335) && (a_0 < 4399)) {
        v_4 = STATS::_BA52FF538ED2BC71(a_0 - 4335, 0, 0, 0, "_NGPSTAT_BOOL");
    } else if ((a_0 >= 4207) && (a_0 < 4335)) {
        v_4 = STATS::_BA52FF538ED2BC71(a_0 - 4207, 0, 1, a_1, "_NGPSTAT_BOOL");
    } else if ((a_0 >= 6029) && (a_0 < 6413)) {
        v_4 = STATS::_BA52FF538ED2BC71(a_0 - 6029, 0, 1, a_1, "_NGTATPSTAT_BOOL");
    } else if ((a_0 >= 7321) && (a_0 < 7385)) {
        v_4 = STATS::_BA52FF538ED2BC71(a_0 - 7321, 0, 0, 0, "_NGPSTAT_BOOL");
    } else if ((a_0 >= 7385) && (a_0 < 7449)) {
        v_4 = STATS::_BA52FF538ED2BC71(a_0 - 7385, 0, 1, a_1, "_NGPSTAT_BOOL");
    }
    return v_4;
}

auto sub_901(auto a_0) {
    if (!sub_6e70()) {
        return 0;
    }
    if (PLAYER::HAS_ACHIEVEMENT_BEEN_PASSED(45)) {
        return 0;
    }
    if (!is_in_transition) {
        return 0;
    }
    v_5 = sub_9fb(746, -1, 0);
    for (v_3 = 0; v_3 < 9; v_3 += 1) {
        if (sub_973(v_5, v_3, a_0)) {
            v_4 += 1;
        }
    }
    if (v_4 == 9) {
        sub_75c7(45, 1);
        return 1;
    }
    return 0;
}

auto sub_973(auto a_0, auto a_1, auto a_2) {
    v_5 = GAMEPLAY::IS_BIT_SET(a_0, a_1);
    if (!a_2) {
        return v_5;
    }
    switch (a_1) {
    case 0:
        return v_5;
    case 1:
        return v_5;
    case 2:
        return v_5;
    case 3:
        return v_5;
    case 4:
        return v_5;
    case 5:
        return v_5;
    case 6:
        return v_5;
    case 7:
        return v_5;
    case 8:
        return v_5;
    }
    return 0;
}

auto sub_9fb(auto a_0, auto a_1, auto a_2) {
    if (a_2 == 0) {}
    v_5 = g_25A3D6[a_0/*5*/][sub_506(a_1)/*1*/];
    if (STATS::STAT_GET_INT(v_5, &v_6, -1)) {
        return v_6;
    }
    return 0;
}

auto sub_a2d(auto a_0, auto a_1) {
    v_4 = g_25F9EA[a_0/*5*/][sub_506(a_1)/*1*/];
    if (STATS::STAT_GET_INT(v_4, &v_5, -1)) {
        return v_5;
    }
    return 0;
}

auto sub_a59(auto a_0) {
    v_3 = a_0;
    if (STATS::STAT_GET_INT(v_3, &v_4, -1)) {
        return v_4;
    }
    return 0;
}

auto sub_a77(auto a_0) {
    if (PLAYER::HAS_ACHIEVEMENT_BEEN_PASSED(37)) {
        return 0;
    }
    if (!sub_6e70()) {
        return 0;
    }
    if (!is_in_transition) {
        return 0;
    }
    if (a_0) {
        v_3 = sub_a2d(21, -1);
        v_3 -= sub_a2d(58, -1);
        v_3 -= sub_a2d(57, -1);
    }
    if (sub_ae1(8, -1)) {
        sub_75c7(37, 1);
        return 1;
    }
    return 0;
}

auto sub_ae1(auto a_0, auto a_1) {
    v_4 = g_25FBA8[a_0/*5*/][sub_506(a_1)/*1*/];
    if (STATS::STAT_GET_BOOL(v_4, &v_5, -1)) {
        return v_5;
    }
    return 0;
}

auto sub_b0d(auto a_0, auto a_1) {
    if (a_1 == 0) {}
    v_5 = 8000;
    v_6 = 0;
    v_7 = (v_5 - v_6) / 2;
    for (v_4 = 0; v_4 <= 100; v_4 += 1) {
        if (v_5 == v_6) {
            v_4 = 8000;
            if (v_7 == 0) {
                v_7 = 1;
            }
            return v_7;
        }
        if (g_42E17[v_7/*1*/] == a_0) {
            v_5 = v_7;
            v_6 = v_7;
        } else if (g_42E17[v_7/*1*/] < a_0) {
            if (v_6 == v_7) {
                v_6 += 1;
            } else { 
                v_6 = v_7;
            }
        } else if (v_5 == v_7) {
            v_5 -= 1;
        } else { 
            v_5 = v_7;
        }
        v_8 = ((__678_$BBDA792448DB5A89(v_5) - __678_$BBDA792448DB5A89(v_6)) / 2.0) + __678_$BBDA792448DB5A89(v_6);
        v_7 = SYSTEM::ROUND(v_8);
    }
    return 8000;
}

auto sub_bcc(auto a_0) {
    return g_14901D[sub_506(a_0)/*1*/];
}

void sub_be0(auto a_0) {
    asm .vardef<F> 4, "[{\"type\":\"field\",\"value\":[{\"offset\":0,\"value\":44}]},{\"type\":\"field\",\"value\":[{\"offset\":133,\"value\":50}]}]"
    if (PLAYER::HAS_ACHIEVEMENT_BEEN_PASSED(29)) {
        return ;
    }
    sub_5c15(a_0, &v_4);
    v_3 = 0;
    for (v_3 = 0; v_3 < v_4; v_3 += 1) {
        if (sub_c6f(a_0, v_4[v_3/*3*/])) {
            sub_75c7(29, 1);
            return ;
        }
    }
    v_3 = 0;
    for (v_3 = 0; v_3 < v_4._f85; v_3 += 1) {
        if (sub_c6f(a_0, v_4._f85[v_3/*3*/])) {
            sub_75c7(29, 1);
            return ;
        }
    }
}

auto sub_c6f(auto a_0, auto a_1) {
    if (a_1 == 0xfc508e33) {
        return 0;
    }
    if (a_1 == 0xd8df3c3c) {
        return 0;
    }
    if (PED::IS_PED_INJURED(a_0)) {
        return 0;
    }
    if (!WEAPON::HAS_PED_GOT_WEAPON(a_0, a_1, 0)) {
        return 0;
    }
    v_2B = sub_5bda(a_1, &v_4);
    if (((((((((((((((((((((((a_1 != ${weapon_pistol}) && (a_1 != ${weapon_appistol})) && (a_1 != ${weapon_combatpistol})) && (a_1 != ${weapon_microsmg})) && (a_1 != ${weapon_smg})) && (a_1 != ${weapon_pumpshotgun})) && (a_1 != ${weapon_assaultshotgun})) && (a_1 != ${weapon_sawnoffshotgun})) && (a_1 != ${weapon_assaultrifle})) && (a_1 != ${weapon_carbinerifle})) && (a_1 != ${weapon_advancedrifle})) && (a_1 != ${weapon_sniperrifle})) && (a_1 != ${weapon_heavysniper})) && (a_1 != ${weapon_mg})) && (a_1 != ${weapon_combatmg})) && (a_1 != ${weapon_grenadelauncher})) && (a_1 != ${weapon_assaultmg})) && (a_1 != ${weapon_assaultsmg})) && (a_1 != ${weapon_assaultsniper})) && (a_1 != ${weapon_heavyrifle})) && (a_1 != ${weapon_bullpupshotgun})) && (a_1 != 0x99aeeb3b)) && ((v_2B == -1) || (DLC1::GET_NUM_DLC_WEAPON_COMPONENTS(v_2B) < 3))) {
        return 0;
    }
    v_2C = 0;
    v_2D = 0;
    v_2E = 0;
    v_2F = 0;
    v_30 = 0;
    while (sub_eec(&v_31, a_1, v_30, 0)) {
        if (v_31._f4 == ${wapclip}) {
            v_2D += 1;
        }
        if (v_31._f4 == ${wapscop}) {
            v_2C += 1;
        }
        if (WEAPON::HAS_PED_GOT_WEAPON_COMPONENT(a_0, a_1, v_31)) {
            if (v_31._f4 == ${wapclip}) {
                v_2F = v_31._f5;
            } else if (v_31._f4 == ${wapscop}) {
                v_2E = v_31._f5;
            }
        } else if ((((v_31._f4 == ${wapclip}) || (v_31._f4 == ${wapscop})) || (v_31._f4 == 0x9221a98d)) || (v_31._f4 == 0x395e9926)) {
        } else { 
            return 0;
        }
        v_30 += 1;
    }
    if (v_2C > v_2E) {
        return 0;
    }
    if (v_2D > v_2F) {
        return 0;
    }
    if ((WEAPON::GET_WEAPON_TINT_COUNT(a_1) > 0) && (WEAPON::GET_PED_WEAPON_TINT_INDEX(a_0, a_1) == 0)) {
        return 0;
    }
    return 1;
}

auto sub_eec(auto a_0, auto a_1, auto a_2, auto a_3) {
    sub_5bbb(a_0, 0, 0x3af5bac2, 0, 0);
    switch (a_1) {
    case ${weapon_pistol}:
        switch (a_2) {
        case 0:
            sub_5bbb(a_0, 0xfed0fd71, ${wapclip}, 1, 1);
            break;
        case 1:
            sub_5bbb(a_0, 0xed265a1c, ${wapclip}, 2, 0);
            break;
        case 2:
            sub_5bbb(a_0, ${component_at_pi_flsh}, ${wapflshlasr}, 1, 0);
            break;
        case 3:
            sub_5bbb(a_0, 0x65ea7ebb, ${wapsupp}, 1, 0);
            break;
        case 4:
            sub_5bbb(a_0, 0xd7391086, 0x395e9926, 1, 0);
            break;
        }
        break;
    case ${weapon_combatpistol}:
        switch (a_2) {
        case 0:
            sub_5bbb(a_0, 0x721b079, ${wapclip}, 1, 1);
            break;
        case 1:
            sub_5bbb(a_0, 0xd67b4f2d, ${wapclip}, 2, 0);
            break;
        case 2:
            sub_5bbb(a_0, ${component_at_pi_flsh}, ${wapflshlasr}, 1, 0);
            break;
        case 3:
            sub_5bbb(a_0, ${component_at_pi_supp}, ${wapsupp}, 1, 0);
            break;
        case 4:
            sub_5bbb(a_0, 0xc6654d72, 0x395e9926, 1, 0);
            break;
        }
        break;
    case ${weapon_appistol}:
        switch (a_2) {
        case 0:
            sub_5bbb(a_0, 0x31c4b22a, ${wapclip}, 1, 1);
            break;
        case 1:
            sub_5bbb(a_0, 0x249a17d5, ${wapclip}, 2, 0);
            break;
        case 2:
            sub_5bbb(a_0, ${component_at_pi_flsh}, ${wapflshlasr}, 1, 0);
            break;
        case 3:
            sub_5bbb(a_0, ${component_at_pi_supp}, ${wapsupp}, 1, 0);
            break;
        case 4:
            sub_5bbb(a_0, 0x9b76c72c, 0x395e9926, 1, 0);
            break;
        }
        break;
    case ${weapon_microsmg}:
        switch (a_2) {
        case 0:
            sub_5bbb(a_0, 0xcb48aef0, ${wapclip}, 1, 1);
            break;
        case 1:
            sub_5bbb(a_0, 0x10e6ba2b, ${wapclip}, 2, 0);
            break;
        case 2:
            sub_5bbb(a_0, ${component_at_pi_flsh}, ${wapflshlasr}, 1, 0);
            break;
        case 3:
            sub_5bbb(a_0, ${component_at_scope_macro}, ${wapscop}, 1, 0);
            break;
        case 4:
            sub_5bbb(a_0, ${component_at_ar_supp_02}, ${wapsupp}, 1, 0);
            break;
        case 5:
            sub_5bbb(a_0, 0x487aae09, 0x395e9926, 1, 0);
            break;
        }
        break;
    case ${weapon_smg}:
        switch (a_2) {
        case 0:
            sub_5bbb(a_0, 0x26574997, ${wapclip}, 1, 1);
            break;
        case 1:
            sub_5bbb(a_0, 0x350966fb, ${wapclip}, 2, 0);
            break;
        case 2:
            sub_5bbb(a_0, ${component_at_ar_flsh}, ${wapflshlasr}, 1, 0);
            break;
        case 3:
            sub_5bbb(a_0, 0x3cc6ba57, ${wapscop}, 1, 0);
            break;
        case 4:
            sub_5bbb(a_0, ${component_at_pi_supp}, ${wapsupp}, 1, 0);
            break;
        case 5:
            sub_5bbb(a_0, 0x27872c90, 0x395e9926, 1, 0);
            break;
        }
        break;
    case ${weapon_assaultrifle}:
        switch (a_2) {
        case 0:
            sub_5bbb(a_0, 0xbe5eea16, ${wapclip}, 1, 1);
            break;
        case 1:
            sub_5bbb(a_0, 0xb1214f9b, ${wapclip}, 2, 0);
            break;
        case 2:
            sub_5bbb(a_0, ${component_at_ar_afgrip}, ${wapgrip}, 1, 0);
            break;
        case 3:
            sub_5bbb(a_0, ${component_at_ar_flsh}, ${wapflshlasr}, 1, 0);
            break;
        case 4:
            sub_5bbb(a_0, ${component_at_scope_macro}, ${wapscop}, 1, 0);
            break;
        case 5:
            sub_5bbb(a_0, ${component_at_ar_supp_02}, ${wapsupp}, 1, 0);
            break;
        case 6:
            sub_5bbb(a_0, 0x4ead7533, 0x395e9926, 1, 0);
            break;
        }
        break;
    case ${weapon_carbinerifle}:
        switch (a_2) {
        case 0:
            sub_5bbb(a_0, 0x9fbe33ec, ${wapclip}, 1, 1);
            break;
        case 1:
            sub_5bbb(a_0, 0x91109691, ${wapclip}, 2, 0);
            break;
        case 2:
            sub_5bbb(a_0, 0x75414f30, 0x9221a98d, 1, 0);
            break;
        case 3:
            sub_5bbb(a_0, ${component_at_ar_afgrip}, ${wapgrip}, 1, 0);
            break;
        case 4:
            sub_5bbb(a_0, ${component_at_ar_flsh}, ${wapflshlasr}, 1, 0);
            break;
        case 5:
            sub_5bbb(a_0, ${component_at_scope_medium}, ${wapscop}, 1, 0);
            break;
        case 6:
            sub_5bbb(a_0, ${component_at_ar_supp}, ${wapsupp}, 1, 0);
            break;
        case 7:
            sub_5bbb(a_0, 0xd89b9658, 0x395e9926, 1, 0);
            break;
        }
        break;
    case ${weapon_advancedrifle}:
        switch (a_2) {
        case 0:
            sub_5bbb(a_0, 0xfa8fa10f, ${wapclip}, 1, 1);
            break;
        case 1:
            sub_5bbb(a_0, 0x8ec1c979, ${wapclip}, 2, 0);
            break;
        case 2:
            sub_5bbb(a_0, ${component_at_ar_flsh}, ${wapflshlasr}, 1, 0);
            break;
        case 3:
            sub_5bbb(a_0, ${component_at_scope_small}, ${wapscop}, 1, 0);
            break;
        case 4:
            sub_5bbb(a_0, ${component_at_ar_supp}, ${wapsupp}, 1, 0);
            break;
        case 5:
            sub_5bbb(a_0, 0x377cd377, 0x395e9926, 1, 0);
            break;
        }
        break;
    case ${weapon_mg}:
        switch (a_2) {
        case 0:
            sub_5bbb(a_0, 0xf434ef84, ${wapclip}, 1, 1);
            break;
        case 1:
            sub_5bbb(a_0, 0x82158b47, ${wapclip}, 2, 0);
            break;
        case 2:
            sub_5bbb(a_0, 0x3c00afed, ${wapscop}, 1, 0);
            break;
        case 3:
            sub_5bbb(a_0, 0xd6dababe, 0x395e9926, 1, 0);
            break;
        }
        break;
    case ${weapon_combatmg}:
        switch (a_2) {
        case 0:
            sub_5bbb(a_0, 0xe1ffb34a, ${wapclip}, 1, 1);
            break;
        case 1:
            sub_5bbb(a_0, 0xd6c59cd6, ${wapclip}, 2, 0);
            break;
        case 2:
            sub_5bbb(a_0, ${component_at_ar_afgrip}, ${wapgrip}, 1, 0);
            break;
        case 3:
            sub_5bbb(a_0, ${component_at_scope_medium}, ${wapscop}, 1, 0);
            break;
        case 4:
            sub_5bbb(a_0, 0x92feccdd, 0x395e9926, 1, 0);
            break;
        }
        break;
    case ${weapon_pumpshotgun}:
        switch (a_2) {
        case 0:
            sub_5bbb(a_0, ${component_at_ar_flsh}, ${wapflshlasr}, 1, 0);
            break;
        case 1:
            sub_5bbb(a_0, ${component_at_sr_supp}, ${wapsupp}, 1, 0);
            break;
        case 2:
            sub_5bbb(a_0, 0xa2d79ddb, 0x395e9926, 1, 0);
            break;
        }
        break;
    case ${weapon_assaultshotgun}:
        switch (a_2) {
        case 0:
            sub_5bbb(a_0, 0x94e81bc7, ${wapclip}, 1, 1);
            break;
        case 1:
            sub_5bbb(a_0, 0x86bd7f72, ${wapclip}, 2, 0);
            break;
        case 2:
            sub_5bbb(a_0, ${component_at_ar_afgrip}, ${wapgrip}, 1, 0);
            break;
        case 3:
            sub_5bbb(a_0, ${component_at_ar_flsh}, ${wapflshlasr}, 1, 0);
            break;
        case 4:
            sub_5bbb(a_0, ${component_at_ar_supp}, ${wapsupp}, 1, 0);
            break;
        }
        break;
    case ${weapon_sniperrifle}:
        switch (a_2) {
        case 0:
            sub_5bbb(a_0, 0x9bc64089, ${wapclip}, 1, 1);
            break;
        case 1:
            sub_5bbb(a_0, ${component_at_ar_supp_02}, ${wapsupp}, 1, 0);
            break;
        case 2:
            sub_5bbb(a_0, ${component_at_scope_large}, ${wapscop}, 1, 1);
            break;
        case 3:
            sub_5bbb(a_0, ${component_at_scope_max}, ${wapscop}, 2, 0);
            break;
        case 4:
            sub_5bbb(a_0, 0x4032b5e7, 0x395e9926, 1, 0);
            break;
        }
        break;
    case ${weapon_heavysniper}:
        switch (a_2) {
        case 0:
            sub_5bbb(a_0, 0x476f52f4, ${wapclip}, 1, 1);
            break;
        case 1:
            sub_5bbb(a_0, ${component_at_scope_large}, ${wapscop}, 1, 1);
            break;
        case 2:
            sub_5bbb(a_0, ${component_at_scope_max}, ${wapscop}, 2, 0);
            break;
        }
        break;
    case ${weapon_grenadelauncher}:
        switch (a_2) {
        case 0:
            sub_5bbb(a_0, ${component_at_ar_afgrip}, ${wapgrip}, 1, 0);
            break;
        case 1:
            sub_5bbb(a_0, ${component_at_ar_flsh}, ${wapflshlasr}, 1, 0);
            break;
        case 2:
            sub_5bbb(a_0, ${component_at_scope_small}, ${wapscop}, 1, 0);
            break;
        }
        break;
    case ${weapon_minigun}:
        switch (a_2) {
        case 0:
            sub_5bbb(a_0, 0xc8de6f06, ${wapclip}, 1, 1);
            break;
        }
        break;
    case ${weapon_assaultsmg}:
        switch (a_2) {
        case 0:
            sub_5bbb(a_0, 0x8d1307b0, ${wapclip}, 1, 1);
            break;
        case 1:
            sub_5bbb(a_0, 0xbb46e417, ${wapclip}, 2, 0);
            break;
        case 2:
            sub_5bbb(a_0, ${component_at_ar_flsh}, ${wapflshlasr}, 1, 0);
            break;
        case 3:
            sub_5bbb(a_0, ${component_at_scope_macro}, ${wapscop}, 1, 0);
            break;
        case 4:
            sub_5bbb(a_0, ${component_at_ar_supp_02}, ${wapsupp}, 1, 0);
            break;
        case 5:
            sub_5bbb(a_0, 0x278c78af, 0x395e9926, 1, 0);
            break;
        }
        break;
    case ${weapon_bullpupshotgun}:
        switch (a_2) {
        case 0:
            sub_5bbb(a_0, ${component_at_ar_afgrip}, ${wapgrip}, 1, 0);
            break;
        case 1:
            sub_5bbb(a_0, ${component_at_ar_flsh}, ${wapflshlasr}, 1, 0);
            break;
        case 2:
            sub_5bbb(a_0, ${component_at_ar_supp_02}, ${wapsupp}, 1, 0);
            break;
        }
        break;
    case 0x99aeeb3b:
        switch (a_2) {
        case 0:
            sub_5bbb(a_0, 0x2297be19, ${wapclip}, 1, 1);
            break;
        case 1:
            sub_5bbb(a_0, 0xd9d3ac92, ${wapclip}, 2, 0);
            break;
        case 2:
            sub_5bbb(a_0, ${component_at_pi_flsh}, ${wapflshlasr}, 1, 0);
            break;
        case 3:
            sub_5bbb(a_0, ${component_at_ar_supp_02}, ${wapsupp}, 1, 0);
            break;
        case 4:
            sub_5bbb(a_0, 0x77b8ab2f, 0x395e9926, 1, 0);
            break;
        }
        break;
    case ${weapon_sawnoffshotgun}:
        switch (a_2) {
        case 0:
            sub_5bbb(a_0, 0x85a64df9, 0x395e9926, 1, 0);
            break;
        }
        break;
    default:
        v_10 = sub_5bda(a_1, &v_12);
        if (v_10 != -1) {
            for (v_11 = 0; v_11 < DLC1::GET_NUM_DLC_WEAPON_COMPONENTS(v_10); v_11 += 1) {
                if (DLC1::GET_DLC_WEAPON_COMPONENT_DATA(v_10, v_11, &v_39)) {
                    if ((v_39 == ${wapclip}) || (v_39 == 0x11621646)) {
                        v_7 += 1;
                    } else if ((v_39 == ${wapflshlasr}) || (v_39 == ${wapflshlasr_2})) {
                        v_8 += 1;
                    } else if ((v_39 == ${wapscop}) || (v_39 == ${wapscop_2})) {
                        v_9 += 1;
                    } else if ((v_39 == 0x9221a98d) || (v_39 == 0x1da14ce5)) {
                        v_A += 1;
                    } else if ((v_39 == ${wapgrip}) || (v_39 == 0xdf693abd)) {
                        v_B += 1;
                    } else if ((v_39 == ${wapsupp}) || (v_39 == ${wapsupp_2})) {
                        v_C += 1;
                    } else if (v_39 == 0x67386f9b) {
                        v_D += 1;
                    } else if (v_39 == 0x395e9926) {
                        v_E += 1;
                    } else { 
                        v_F += 1;
                    }
                    if (v_11 == a_2) {
                        if ((v_39 == ${wapclip}) || (v_39 == 0x11621646)) {
                            v_6 = v_7;
                        } else if ((v_39 == ${wapflshlasr}) || (v_39 == ${wapflshlasr_2})) {
                            v_6 = v_8;
                        } else if ((v_39 == ${wapscop}) || (v_39 == ${wapscop_2})) {
                            v_6 = v_9;
                        } else if ((v_39 == 0x9221a98d) || (v_39 == 0x1da14ce5)) {
                            v_6 = v_A;
                        } else if ((v_39 == ${wapgrip}) || (v_39 == 0xdf693abd)) {
                            v_6 = v_B;
                        } else if ((v_39 == ${wapsupp}) || (v_39 == ${wapsupp_2})) {
                            v_6 = v_C;
                        } else if (v_39 == 0x67386f9b) {
                            v_6 = v_D;
                        } else if (v_39 == 0x395e9926) {
                            v_6 = v_E;
                        } else { 
                            v_6 = v_F;
                        }
                        sub_5bbb(a_0, v_39._f3, v_39, v_6, v_39._f1);
                    }
                }
            }
        }
        break;
    }
    if (a_3) {
        a_0._f2 = sub_1c47(a_1, a_0);
    }
    return a_0._f4 != 0x3af5bac2;
}

auto sub_1c47(auto a_0, auto a_1) {
    v_4 = 0;
    v_5 = 2.5;
    if (!NETWORK::NETWORK_IS_GAME_IN_PROGRESS()) {
        v_5 = 2.5;
        switch (a_0) {
        case ${weapon_pistol}:
            switch (a_1) {
            case 0xfed0fd71:
                v_4 = 120;
                break;
            case 0xed265a1c:
                v_4 = 155;
                break;
            case ${component_at_pi_flsh}:
                v_4 = 189;
                break;
            case 0x65ea7ebb:
                v_4 = 729;
                break;
            case 0xd7391086:
                v_4 = 18600;
                break;
            }
            break;
        case ${weapon_combatpistol}:
            switch (a_1) {
            case 0x721b079:
                v_4 = 136;
                break;
            case 0xd67b4f2d:
                v_4 = 159;
                break;
            case ${component_at_pi_flsh}:
                v_4 = 189;
                break;
            case ${component_at_pi_supp}:
                v_4 = 735;
                break;
            case 0xc6654d72:
                v_4 = 14500;
                break;
            }
            break;
        case ${weapon_appistol}:
            switch (a_1) {
            case 0x31c4b22a:
                v_4 = 145;
                break;
            case 0x249a17d5:
                v_4 = 165;
                break;
            case ${component_at_pi_flsh}:
                v_4 = 185;
                break;
            case ${component_at_pi_supp}:
                v_4 = 730;
                break;
            case 0x9b76c72c:
                v_4 = 15800;
                break;
            }
            break;
        case ${weapon_microsmg}:
            switch (a_1) {
            case 0xcb48aef0:
                v_4 = 120;
                break;
            case 0x10e6ba2b:
                v_4 = 137;
                break;
            case ${component_at_pi_flsh}:
                v_4 = 190;
                break;
            case ${component_at_scope_macro}:
                v_4 = 549;
                break;
            case ${component_at_ar_supp_02}:
                v_4 = 775;
                break;
            case 0x487aae09:
                v_4 = 15100;
                break;
            }
            break;
        case ${weapon_smg}:
            switch (a_1) {
            case 0x26574997:
                v_4 = 119;
                break;
            case 0x350966fb:
                v_4 = 134;
                break;
            case ${component_at_ar_flsh}:
                v_4 = 210;
                break;
            case 0x3cc6ba57:
                v_4 = 549;
                break;
            case ${component_at_pi_supp}:
                v_4 = 815;
                break;
            case 0x27872c90:
                v_4 = 19300;
                break;
            }
            break;
        case ${weapon_assaultrifle}:
            switch (a_1) {
            case 0xbe5eea16:
                v_4 = 120;
                break;
            case 0xb1214f9b:
                v_4 = 129;
                break;
            case ${component_at_ar_afgrip}:
                v_4 = 159;
                break;
            case ${component_at_ar_flsh}:
                v_4 = 189;
                break;
            case ${component_at_scope_macro}:
                v_4 = 565;
                break;
            case ${component_at_ar_supp_02}:
                v_4 = 810;
                break;
            case 0x4ead7533:
                v_4 = 14400;
                break;
            }
            break;
        case ${weapon_carbinerifle}:
            switch (a_1) {
            case 0x9fbe33ec:
                v_4 = 99;
                break;
            case 0x91109691:
                v_4 = 105;
                break;
            case 0x75414f30:
                v_4 = -1;
                break;
            case ${component_at_ar_afgrip}:
                v_4 = 132;
                break;
            case ${component_at_ar_flsh}:
                v_4 = 150;
                break;
            case ${component_at_scope_medium}:
                v_4 = 450;
                break;
            case ${component_at_ar_supp}:
                v_4 = 815;
                break;
            case 0xd89b9658:
                v_4 = 17900;
                break;
            }
            break;
        case ${weapon_advancedrifle}:
            switch (a_1) {
            case 0xfa8fa10f:
                v_4 = 110;
                break;
            case 0x8ec1c979:
                v_4 = 124;
                break;
            case ${component_at_ar_flsh}:
                v_4 = 159;
                break;
            case ${component_at_scope_small}:
                v_4 = 450;
                break;
            case ${component_at_ar_supp}:
                v_4 = 812;
                break;
            case 0x377cd377:
                v_4 = 16500;
                break;
            }
            break;
        case ${weapon_mg}:
            switch (a_1) {
            case 0xf434ef84:
                v_4 = 135;
                break;
            case 0x82158b47:
                v_4 = 145;
                break;
            case 0x3c00afed:
                v_4 = 450;
                break;
            case 0xd6dababe:
                v_4 = 15600;
                break;
            }
            break;
        case ${weapon_combatmg}:
            switch (a_1) {
            case 0xe1ffb34a:
                v_4 = 119;
                break;
            case 0xd6c59cd6:
                v_4 = 126;
                break;
            case ${component_at_ar_afgrip}:
                v_4 = 129;
                break;
            case ${component_at_scope_medium}:
                v_4 = 559;
                break;
            case 0x92feccdd:
                v_4 = 14000;
                break;
            }
            break;
        case ${weapon_pumpshotgun}:
            switch (a_1) {
            case ${component_at_ar_flsh}:
                v_4 = 189;
                break;
            case ${component_at_sr_supp}:
                v_4 = 975;
                break;
            case 0xa2d79ddb:
                v_4 = 16900;
                break;
            }
            break;
        case ${weapon_assaultshotgun}:
            switch (a_1) {
            case 0x94e81bc7:
                v_4 = 129;
                break;
            case 0x86bd7f72:
                v_4 = 139;
                break;
            case ${component_at_ar_afgrip}:
                v_4 = 150;
                break;
            case ${component_at_ar_flsh}:
                v_4 = 225;
                break;
            case ${component_at_ar_supp}:
                v_4 = 899;
                break;
            }
            break;
        case ${weapon_sniperrifle}:
            switch (a_1) {
            case 0x9bc64089:
                v_4 = -1;
                break;
            case ${component_at_scope_large}:
                v_4 = 559;
                break;
            case ${component_at_scope_max}:
                v_4 = 975;
                break;
            case ${component_at_ar_supp_02}:
                v_4 = 920;
                break;
            case 0x4032b5e7:
                v_4 = 13000;
                break;
            }
            break;
        case ${weapon_heavysniper}:
            switch (a_1) {
            case 0x476f52f4:
                v_4 = -1;
                break;
            case ${component_at_scope_large}:
                v_4 = 575;
                break;
            case ${component_at_scope_max}:
                v_4 = 999;
                break;
            }
            break;
        case ${weapon_grenadelauncher}:
            switch (a_1) {
            case ${component_at_ar_afgrip}:
                v_4 = 128;
                break;
            case ${component_at_ar_flsh}:
                v_4 = 185;
                break;
            case ${component_at_scope_small}:
                v_4 = 525;
                break;
            }
            break;
        case ${weapon_minigun}:
            switch (a_1) {
            case 0xc8de6f06:
                v_4 = -1;
                break;
            }
            break;
        case ${weapon_assaultsmg}:
            switch (a_1) {
            case 0x8d1307b0:
                v_4 = 110;
                break;
            case 0xbb46e417:
                v_4 = 9700;
                break;
            case ${component_at_ar_flsh}:
                v_4 = 2275;
                break;
            case ${component_at_scope_macro}:
                v_4 = 10875;
                break;
            case ${component_at_ar_supp_02}:
                v_4 = 12400;
                break;
            case 0x278c78af:
                v_4 = 17600;
                break;
            }
            if (sub_5b00() && (sub_59ac() || sub_58db())) {
                v_4 = 0;
            }
            break;
        case ${weapon_bullpupshotgun}:
            switch (a_1) {
            case ${component_at_ar_afgrip}:
                v_4 = 4100;
                break;
            case ${component_at_ar_flsh}:
                v_4 = 2300;
                break;
            case ${component_at_ar_supp_02}:
                v_4 = 12450;
                break;
            }
            if (sub_5b00() && (sub_59ac() || sub_58db())) {
                v_4 = 0;
            }
            break;
        case 0x99aeeb3b:
            switch (a_1) {
            case 0x2297be19:
                v_4 = 0;
                break;
            case 0xd9d3ac92:
                v_4 = 9500;
                break;
            case ${component_at_pi_flsh}:
                v_4 = 2000;
                break;
            case ${component_at_ar_supp_02}:
                v_4 = 12250;
                break;
            case 0x77b8ab2f:
                v_4 = 20000;
                break;
            }
            if (sub_5b00() && (sub_59ac() || sub_58db())) {
                v_4 = 0;
            }
            break;
        case ${weapon_sawnoffshotgun}:
            switch (a_1) {
            case 0x85a64df9:
                v_4 = 13700;
                break;
            }
            break;
        case 0xc734385a:
            switch (a_1) {
            case 0xd83b4141:
                v_4 = 0;
                break;
            case 0xccfd2ac5:
                v_4 = 3612;
                break;
            case 0x1c221b1a:
                v_4 = 0;
                break;
            case ${component_at_ar_flsh}:
                v_4 = 1020;
                break;
            case ${component_at_ar_supp}:
                v_4 = 5000;
                break;
            case ${component_at_ar_afgrip}:
                v_4 = 1760;
                break;
            case 0x161e9241:
                v_4 = 17200;
                break;
            }
            break;
        case ${weapon_heavypistol}:
            switch (a_1) {
            case ${component_heavypistol_clip_01}:
                v_4 = 0;
                break;
            case ${component_heavypistol_clip_02}:
                v_4 = 3680;
                break;
            case ${component_at_pi_flsh}:
                v_4 = 710;
                break;
            case ${component_at_pi_supp}:
                v_4 = 4800;
                break;
            case 0x7a6a7b7b:
                v_4 = 12000;
                break;
            }
            break;
        case 0xd8df3c3c:
            switch (a_1) {
            case 0xc613f685:
                v_4 = 4900;
                break;
            case 0xeed9fd63:
                v_4 = 5600;
                break;
            case 0x50910c31:
                v_4 = 5500;
                break;
            case 0x9761d9dc:
                v_4 = 5200;
                break;
            case 0x7decfe30:
                v_4 = 4600;
                break;
            case 0x3f4e8aa6:
                v_4 = 4700;
                break;
            case 0x8b808bb:
                v_4 = 4800;
                break;
            case 0xe28babef:
                v_4 = 4300;
                break;
            case 0x7af3f785:
                v_4 = 4000;
                break;
            }
            break;
        case ${weapon_bullpuprifle}:
            switch (a_1) {
            case ${component_bullpuprifle_clip_01}:
                v_4 = 108;
                break;
            case ${component_bullpuprifle_clip_02}:
                v_4 = 9950;
                break;
            case ${component_at_ar_flsh}:
                v_4 = 2575;
                break;
            case ${component_at_scope_macro}:
                v_4 = 11350;
                break;
            case ${component_at_ar_supp_02}:
                v_4 = 12500;
                break;
            case ${component_at_ar_afgrip}:
                v_4 = 4275;
                break;
            case 0xa857bc78:
                v_4 = 16600;
                break;
            }
            break;
        case ${weapon_snspistol}:
            switch (a_1) {
            case ${component_snspistol_clip_01}:
                v_4 = 29;
                break;
            case ${component_snspistol_clip_02}:
                v_4 = 9150;
                break;
            case 0x8033ecaf:
                v_4 = 13900;
                break;
            }
            break;
        case ${weapon_specialcarbine}:
            switch (a_1) {
            case ${component_specialcarbine_clip_01}:
                v_4 = 108;
                break;
            case ${component_specialcarbine_clip_02}:
                v_4 = 9975;
                break;
            case ${component_at_ar_flsh}:
                v_4 = 2525;
                break;
            case ${component_at_scope_medium}:
                v_4 = 11550;
                break;
            case ${component_at_ar_supp_02}:
                v_4 = 12500;
                break;
            case 0x730154f2:
                v_4 = 18000;
                break;
            }
            break;
        case 0xdb1aa450:
            switch (a_1) {
            case 0x476e85ff:
                v_4 = 0;
                break;
            case 0xb92c6979:
                v_4 = 3680;
                break;
            case ${component_at_pi_supp}:
                v_4 = 4840;
                break;
            }
            break;
        default:
            v_6 = sub_5bda(a_0, &v_8);
            if (v_6 != -1) {
                for (v_7 = 0; v_7 < DLC1::GET_NUM_DLC_WEAPON_COMPONENTS(v_6); v_7 += 1) {
                    if (DLC1::GET_DLC_WEAPON_COMPONENT_DATA(v_6, v_7, &v_2F)) {
                        if (v_2F._f3 == a_1) {
                            v_5 = 1.0;
                            if (v_2F._f5 == -1) {
                                v_4 = -1;
                            } else { 
                                v_4 = v_2F._f5;
                            }
                            if (a_0 == ${weapon_hammer}) {
                                if (sub_5b00() && (sub_59ac() || sub_58db())) {
                                    v_4 = 0;
                                }
                            }
                        }
                    }
                }
            }
            break;
        }
    } else { 
        v_5 = 2.5;
        switch (a_0) {
        case ${weapon_pistol}:
            switch (a_1) {
            case 0xfed0fd71:
                v_4 = 120;
                break;
            case 0xed265a1c:
                v_4 = 9175;
                v_4 = SYSTEM::FLOOR(__678_$BBDA792448DB5A89(v_4) * g_40001._fB3E);
                break;
            case ${component_at_pi_flsh}:
                v_4 = 1675;
                v_4 = SYSTEM::FLOOR(__678_$BBDA792448DB5A89(v_4) * g_40001._f10E8);
                break;
            case 0x65ea7ebb:
                v_4 = 12050;
                v_4 = SYSTEM::FLOOR(__678_$BBDA792448DB5A89(v_4) * g_40001._f10E9);
                break;
            case 0xd7391086:
                v_4 = g_40001._f2127;
                v_4 = SYSTEM::FLOOR(__678_$BBDA792448DB5A89(v_4) * g_40001._f1136);
                break;
            }
            break;
        case ${weapon_combatpistol}:
            switch (a_1) {
            case 0x721b079:
                v_4 = 136;
                break;
            case 0xd67b4f2d:
                v_4 = 9250;
                v_4 = SYSTEM::FLOOR(__678_$BBDA792448DB5A89(v_4) * g_40001._fB3F);
                break;
            case ${component_at_pi_flsh}:
                v_4 = 1825;
                v_4 = SYSTEM::FLOOR(__678_$BBDA792448DB5A89(v_4) * g_40001._f10EA);
                break;
            case ${component_at_pi_supp}:
                v_4 = 12100;
                v_4 = SYSTEM::FLOOR(__678_$BBDA792448DB5A89(v_4) * g_40001._f10EB);
                break;
            case 0xc6654d72:
                v_4 = g_40001._f267E;
                v_4 = SYSTEM::FLOOR(__678_$BBDA792448DB5A89(v_4) * g_40001._f1131);
                break;
            }
            break;
        case ${weapon_appistol}:
            switch (a_1) {
            case 0x31c4b22a:
                v_4 = 145;
                break;
            case 0x249a17d5:
                v_4 = 9400;
                v_4 = SYSTEM::FLOOR(__678_$BBDA792448DB5A89(v_4) * g_40001._fB41);
                break;
            case ${component_at_pi_flsh}:
                v_4 = 1975;
                v_4 = SYSTEM::FLOOR(__678_$BBDA792448DB5A89(v_4) * g_40001._f10EC);
                break;
            case ${component_at_pi_supp}:
                v_4 = 12200;
                v_4 = SYSTEM::FLOOR(__678_$BBDA792448DB5A89(v_4) * g_40001._f10ED);
                break;
            case 0x9b76c72c:
                v_4 = g_40001._f2126;
                v_4 = SYSTEM::FLOOR(__678_$BBDA792448DB5A89(v_4) * g_40001._f112B);
                break;
            }
            break;
        case ${weapon_microsmg}:
            switch (a_1) {
            case 0xcb48aef0:
                v_4 = 120;
                break;
            case 0x10e6ba2b:
                v_4 = 9325;
                v_4 = SYSTEM::FLOOR(__678_$BBDA792448DB5A89(v_4) * g_40001._fB42);
                break;
            case ${component_at_pi_flsh}:
                v_4 = 1900;
                v_4 = SYSTEM::FLOOR(__678_$BBDA792448DB5A89(v_4) * g_40001._f10F0);
                break;
            case ${component_at_scope_macro}:
                v_4 = 10800;
                v_4 = SYSTEM::FLOOR(__678_$BBDA792448DB5A89(v_4) * g_40001._f10F2);
                break;
            case ${component_at_ar_supp_02}:
                v_4 = 12150;
                v_4 = SYSTEM::FLOOR(__678_$BBDA792448DB5A89(v_4) * g_40001._f10F1);
                break;
            case 0x487aae09:
                v_4 = g_40001._f212A;
                v_4 = SYSTEM::FLOOR(__678_$BBDA792448DB5A89(v_4) * g_40001._f1135);
                break;
            }
            break;
        case ${weapon_smg}:
            switch (a_1) {
            case 0x26574997:
                v_4 = 119;
                break;
            case 0x350966fb:
                v_4 = 9475;
                v_4 = SYSTEM::FLOOR(__678_$BBDA792448DB5A89(v_4) * g_40001._fB43);
                break;
            case ${component_at_ar_flsh}:
                v_4 = 2050;
                v_4 = SYSTEM::FLOOR(__678_$BBDA792448DB5A89(v_4) * g_40001._f10F3);
                break;
            case 0x3cc6ba57:
                v_4 = 10825;
                v_4 = SYSTEM::FLOOR(__678_$BBDA792448DB5A89(v_4) * g_40001._f10F5);
                break;
            case ${component_at_pi_supp}:
                v_4 = 12250;
                v_4 = SYSTEM::FLOOR(__678_$BBDA792448DB5A89(v_4) * g_40001._f10F4);
                break;
            case 0x27872c90:
                v_4 = g_40001._f2129;
                v_4 = SYSTEM::FLOOR(__678_$BBDA792448DB5A89(v_4) * g_40001._f113A);
                break;
            }
            break;
        case ${weapon_assaultrifle}:
            switch (a_1) {
            case 0xbe5eea16:
                v_4 = 120;
                break;
            case 0xb1214f9b:
                v_4 = 9550;
                v_4 = SYSTEM::FLOOR(__678_$BBDA792448DB5A89(v_4) * g_40001._fB45);
                break;
            case ${component_at_ar_afgrip}:
                v_4 = 4200;
                v_4 = SYSTEM::FLOOR(__678_$BBDA792448DB5A89(v_4) * g_40001._f10FD);
                break;
            case ${component_at_ar_flsh}:
                v_4 = 2125;
                v_4 = SYSTEM::FLOOR(__678_$BBDA792448DB5A89(v_4) * g_40001._f10FA);
                break;
            case ${component_at_scope_macro}:
                v_4 = 10850;
                v_4 = SYSTEM::FLOOR(__678_$BBDA792448DB5A89(v_4) * g_40001._f10FC);
                break;
            case ${component_at_ar_supp_02}:
                v_4 = 12300;
                v_4 = SYSTEM::FLOOR(__678_$BBDA792448DB5A89(v_4) * g_40001._f10FB);
                break;
            case 0x4ead7533:
                v_4 = g_40001._f2123;
                v_4 = SYSTEM::FLOOR(__678_$BBDA792448DB5A89(v_4) * g_40001._f112C);
                break;
            }
            break;
        case ${weapon_carbinerifle}:
            switch (a_1) {
            case 0x9fbe33ec:
                v_4 = 99;
                break;
            case 0x91109691:
                v_4 = 9775;
                v_4 = SYSTEM::FLOOR(__678_$BBDA792448DB5A89(v_4) * g_40001._fB46);
                break;
            case 0x75414f30:
                v_4 = -1;
                break;
            case ${component_at_ar_afgrip}:
                v_4 = 4350;
                v_4 = SYSTEM::FLOOR(__678_$BBDA792448DB5A89(v_4) * g_40001._f1105);
                break;
            case ${component_at_ar_flsh}:
                v_4 = 2350;
                v_4 = SYSTEM::FLOOR(__678_$BBDA792448DB5A89(v_4) * g_40001._f1102);
                break;
            case ${component_at_scope_medium}:
                v_4 = 10900;
                v_4 = SYSTEM::FLOOR(__678_$BBDA792448DB5A89(v_4) * g_40001._f1104);
                break;
            case ${component_at_ar_supp}:
                v_4 = 12450;
                v_4 = SYSTEM::FLOOR(__678_$BBDA792448DB5A89(v_4) * g_40001._f1103);
                break;
            case 0xd89b9658:
                v_4 = g_40001._f2125;
                v_4 = SYSTEM::FLOOR(__678_$BBDA792448DB5A89(v_4) * g_40001._f112F);
                break;
            }
            break;
        case ${weapon_advancedrifle}:
            switch (a_1) {
            case 0xfa8fa10f:
                v_4 = 110;
                break;
            case 0x8ec1c979:
                v_4 = 9925;
                v_4 = SYSTEM::FLOOR(__678_$BBDA792448DB5A89(v_4) * g_40001._fB48);
                break;
            case ${component_at_ar_flsh}:
                v_4 = 2425;
                v_4 = SYSTEM::FLOOR(__678_$BBDA792448DB5A89(v_4) * g_40001._f1107);
                break;
            case ${component_at_scope_small}:
                v_4 = 10950;
                v_4 = SYSTEM::FLOOR(__678_$BBDA792448DB5A89(v_4) * g_40001._f1109);
                break;
            case ${component_at_ar_supp}:
                v_4 = 12500;
                v_4 = SYSTEM::FLOOR(__678_$BBDA792448DB5A89(v_4) * g_40001._f1108);
                break;
            case 0x377cd377:
                v_4 = g_40001._f2124;
                v_4 = SYSTEM::FLOOR(__678_$BBDA792448DB5A89(v_4) * g_40001._f112A);
                break;
            }
            break;
        case ${weapon_mg}:
            switch (a_1) {
            case 0xf434ef84:
                v_4 = 135;
                break;
            case 0x82158b47:
                v_4 = 9850;
                v_4 = SYSTEM::FLOOR(__678_$BBDA792448DB5A89(v_4) * g_40001._fB49);
                break;
            case 0x3c00afed:
                v_4 = 10925;
                break;
            case 0xd6dababe:
                v_4 = g_40001._f267F;
                v_4 = SYSTEM::FLOOR(__678_$BBDA792448DB5A89(v_4) * g_40001._f1134);
                break;
            }
            break;
        case ${weapon_combatmg}:
            switch (a_1) {
            case 0xe1ffb34a:
                v_4 = 119;
                break;
            case 0xd6c59cd6:
                v_4 = 10000;
                v_4 = SYSTEM::FLOOR(__678_$BBDA792448DB5A89(v_4) * g_40001._fB4A);
                break;
            case ${component_at_ar_afgrip}:
                v_4 = 4425;
                v_4 = SYSTEM::FLOOR(__678_$BBDA792448DB5A89(v_4) * g_40001._f1120);
                break;
            case ${component_at_scope_medium}:
                v_4 = 10975;
                v_4 = SYSTEM::FLOOR(__678_$BBDA792448DB5A89(v_4) * g_40001._f1121);
                break;
            case 0x92feccdd:
                v_4 = g_40001._f2680;
                v_4 = SYSTEM::FLOOR(__678_$BBDA792448DB5A89(v_4) * g_40001._f1130);
                break;
            }
            break;
        case ${weapon_pumpshotgun}:
            switch (a_1) {
            case ${component_at_ar_flsh}:
                v_4 = 1750;
                v_4 = SYSTEM::FLOOR(__678_$BBDA792448DB5A89(v_4) * g_40001._f110E);
                break;
            case ${component_at_sr_supp}:
                v_4 = 12350;
                v_4 = SYSTEM::FLOOR(__678_$BBDA792448DB5A89(v_4) * g_40001._f110F);
                break;
            case 0xa2d79ddb:
                v_4 = g_40001._f267B;
                v_4 = SYSTEM::FLOOR(__678_$BBDA792448DB5A89(v_4) * g_40001._f1138);
                break;
            }
            break;
        case ${weapon_assaultshotgun}:
            switch (a_1) {
            case 0x94e81bc7:
                v_4 = 129;
                break;
            case 0x86bd7f72:
                v_4 = 9625;
                v_4 = SYSTEM::FLOOR(__678_$BBDA792448DB5A89(v_4) * g_40001._fB4C);
                break;
            case ${component_at_ar_afgrip}:
                v_4 = 4275;
                v_4 = SYSTEM::FLOOR(__678_$BBDA792448DB5A89(v_4) * g_40001._f1112);
                break;
            case ${component_at_ar_flsh}:
                v_4 = 2200;
                v_4 = SYSTEM::FLOOR(__678_$BBDA792448DB5A89(v_4) * g_40001._f1113);
                break;
            case ${component_at_ar_supp}:
                v_4 = 12350;
                v_4 = SYSTEM::FLOOR(__678_$BBDA792448DB5A89(v_4) * g_40001._f1114);
                break;
            }
            break;
        case ${weapon_sniperrifle}:
            switch (a_1) {
            case 0x9bc64089:
                v_4 = -1;
                break;
            case ${component_at_scope_large}:
                v_4 = 12400;
                v_4 = SYSTEM::FLOOR(__678_$BBDA792448DB5A89(v_4) * g_40001._f1115);
                break;
            case ${component_at_scope_max}:
                v_4 = 12500;
                v_4 = SYSTEM::FLOOR(__678_$BBDA792448DB5A89(v_4) * g_40001._f1116);
                break;
            case ${component_at_ar_supp_02}:
                v_4 = 12050;
                v_4 = SYSTEM::FLOOR(__678_$BBDA792448DB5A89(v_4) * g_40001._f1117);
                break;
            case 0x4032b5e7:
                v_4 = g_40001._f212C;
                v_4 = SYSTEM::FLOOR(__678_$BBDA792448DB5A89(v_4) * g_40001._f113B);
                break;
            }
            break;
        case ${weapon_heavysniper}:
            switch (a_1) {
            case 0x476f52f4:
                v_4 = -1;
                break;
            case ${component_at_scope_large}:
                v_4 = 99;
                v_4 = SYSTEM::FLOOR(__678_$BBDA792448DB5A89(v_4) * g_40001._f1118);
                break;
            case ${component_at_scope_max}:
                v_4 = 12500;
                v_4 = SYSTEM::FLOOR(__678_$BBDA792448DB5A89(v_4) * g_40001._f1119);
                break;
            }
            break;
        case ${weapon_grenadelauncher}:
            switch (a_1) {
            case ${component_at_ar_afgrip}:
                v_4 = 4500;
                v_4 = SYSTEM::FLOOR(__678_$BBDA792448DB5A89(v_4) * g_40001._f1122);
                break;
            case ${component_at_ar_flsh}:
                v_4 = 2500;
                v_4 = SYSTEM::FLOOR(__678_$BBDA792448DB5A89(v_4) * g_40001._f111E);
                break;
            case ${component_at_scope_small}:
                v_4 = 11000;
                v_4 = SYSTEM::FLOOR(__678_$BBDA792448DB5A89(v_4) * g_40001._f111F);
                break;
            }
            break;
        case ${weapon_minigun}:
            switch (a_1) {
            case 0xc8de6f06:
                v_4 = -1;
                break;
            }
            break;
        case ${weapon_assaultsmg}:
            switch (a_1) {
            case 0x8d1307b0:
                v_4 = 110;
                break;
            case 0xbb46e417:
                v_4 = 9700;
                v_4 = SYSTEM::FLOOR(__678_$BBDA792448DB5A89(v_4) * g_40001._fB44);
                break;
            case ${component_at_ar_flsh}:
                v_4 = 2275;
                v_4 = SYSTEM::FLOOR(__678_$BBDA792448DB5A89(v_4) * g_40001._f10F6);
                break;
            case ${component_at_scope_macro}:
                v_4 = 10875;
                v_4 = SYSTEM::FLOOR(__678_$BBDA792448DB5A89(v_4) * g_40001._f10F9);
                break;
            case ${component_at_ar_supp_02}:
                v_4 = 12400;
                v_4 = SYSTEM::FLOOR(__678_$BBDA792448DB5A89(v_4) * g_40001._f10F7);
                break;
            case 0x278c78af:
                v_4 = g_40001._f267C;
                v_4 = SYSTEM::FLOOR(__678_$BBDA792448DB5A89(v_4) * g_40001._f10F8);
                break;
            }
            break;
        case 0x61012683:
            switch (a_1) {
            case 0x1ce5a6a5:
                v_4 = 0;
                break;
            case 0xeac8c270:
                v_4 = g_40001._f1388;
                break;
            }
            break;
        case ${weapon_snspistol}:
            switch (a_1) {
            case ${component_snspistol_clip_01}:
                v_4 = 0;
                break;
            case ${component_snspistol_clip_02}:
                v_4 = g_40001._f15C9;
                break;
            case 0x8033ecaf:
                v_4 = g_40001._f267D;
                break;
            }
            break;
        case ${weapon_specialcarbine}:
            switch (a_1) {
            case ${component_specialcarbine_clip_01}:
                v_4 = 0;
                break;
            case ${component_specialcarbine_clip_02}:
                v_4 = g_40001._f15CE;
                break;
            case ${component_at_ar_flsh}:
                v_4 = g_40001._f15D1;
                break;
            case ${component_at_scope_medium}:
                v_4 = g_40001._f15CD;
                break;
            case ${component_at_ar_supp_02}:
                v_4 = g_40001._f15CB;
                break;
            case ${component_at_ar_afgrip}:
                v_4 = g_40001._f15D0;
                break;
            case 0x730154f2:
                v_4 = g_40001._f2681;
                break;
            }
            break;
        case ${weapon_heavypistol}:
            switch (a_1) {
            case ${component_heavypistol_clip_01}:
                v_4 = 0;
                break;
            case ${component_heavypistol_clip_02}:
                v_4 = g_40001._f15CF;
                break;
            case ${component_at_pi_flsh}:
                v_4 = g_40001._f15D3;
                break;
            case ${component_at_pi_supp}:
                v_4 = g_40001._f15CC;
                break;
            case 0x7a6a7b7b:
                v_4 = g_40001._f15E7;
                break;
            }
            break;
        case ${weapon_bullpuprifle}:
            switch (a_1) {
            case ${component_bullpuprifle_clip_01}:
                v_4 = 0;
                break;
            case ${component_bullpuprifle_clip_02}:
                v_4 = g_40001._f15D6;
                break;
            case ${component_at_ar_flsh}:
                v_4 = g_40001._f15D9;
                break;
            case ${component_at_ar_supp}:
                v_4 = g_40001._f15D4;
                break;
            case ${component_at_scope_small}:
                v_4 = g_40001._f15D5;
                break;
            case ${component_at_ar_afgrip}:
                v_4 = g_40001._f15D7;
                break;
            case 0xa857bc78:
                v_4 = g_40001._f2682;
                break;
            }
            break;
        case 0x83839c4:
            switch (a_1) {
            case 0x45a3b6bb:
                v_4 = 0;
                break;
            case 0x33ba12e8:
                v_4 = g_40001._f17AF;
                break;
            case ${component_at_pi_supp}:
                v_4 = g_40001._f17B0;
                break;
            }
            break;
        case 0x3aabbbaa:
            switch (a_1) {
            case 0x324f2d5f:
                v_4 = 0;
                break;
            case 0x971cf6fd:
                v_4 = g_40001._f1A3D;
                break;
            case ${component_at_ar_flsh}:
                v_4 = g_40001._f1A3E;
                break;
            case ${component_at_ar_supp_02}:
                v_4 = g_40001._f1A3F;
                break;
            case ${component_at_ar_afgrip}:
                v_4 = g_40001._f1A40;
                break;
            }
            break;
        case 0xc734385a:
            switch (a_1) {
            case 0xd83b4141:
                v_4 = 0;
                break;
            case 0xccfd2ac5:
                v_4 = g_40001._f1A43;
                break;
            case ${component_at_ar_flsh}:
                v_4 = g_40001._f1A44;
                break;
            case ${component_at_ar_supp}:
                v_4 = g_40001._f1A46;
                break;
            case ${component_at_ar_afgrip}:
                v_4 = g_40001._f1A47;
                break;
            case 0x161e9241:
                v_4 = g_40001._f1A48;
                break;
            }
            break;
        case ${weapon_bullpupshotgun}:
            switch (a_1) {
            case ${component_at_ar_afgrip}:
                v_4 = 4100;
                break;
            case ${component_at_ar_flsh}:
                v_4 = 2300;
                v_4 = SYSTEM::FLOOR(__678_$BBDA792448DB5A89(v_4) * g_40001._f1110);
                break;
            case ${component_at_ar_supp_02}:
                v_4 = 12450;
                v_4 = SYSTEM::FLOOR(__678_$BBDA792448DB5A89(v_4) * g_40001._f1111);
                break;
            }
            if (sub_5b00() && (sub_59ac() || sub_58db())) {
                v_4 = 0;
            }
            break;
        case 0x99aeeb3b:
            switch (a_1) {
            case 0x2297be19:
                v_4 = 0;
                break;
            case 0xd9d3ac92:
                v_4 = 9500;
                v_4 = SYSTEM::FLOOR(__678_$BBDA792448DB5A89(v_4) * g_40001._fB40);
                break;
            case ${component_at_pi_flsh}:
                v_4 = 2000;
                v_4 = SYSTEM::FLOOR(__678_$BBDA792448DB5A89(v_4) * g_40001._f10EE);
                break;
            case ${component_at_ar_supp_02}:
                v_4 = 12250;
                v_4 = SYSTEM::FLOOR(__678_$BBDA792448DB5A89(v_4) * g_40001._f10EF);
                break;
            case 0x77b8ab2f:
                v_4 = g_40001._f2128;
                v_4 = SYSTEM::FLOOR(__678_$BBDA792448DB5A89(v_4) * g_40001._f1137);
                break;
            }
            if (sub_5b00() && (sub_59ac() || sub_58db())) {
                v_4 = 0;
            }
            break;
        case ${weapon_sawnoffshotgun}:
            switch (a_1) {
            case 0x85a64df9:
                v_4 = g_40001._f212B;
                v_4 = SYSTEM::FLOOR(__678_$BBDA792448DB5A89(v_4) * g_40001._f1139);
                break;
            }
            break;
        case 0xd8df3c3c:
            switch (a_1) {
            case 0xc613f685:
                v_4 = g_40001._f2263;
                v_4 = SYSTEM::FLOOR(__678_$BBDA792448DB5A89(v_4) * g_40001._f113E);
                break;
            case 0xeed9fd63:
                v_4 = g_40001._f2264;
                v_4 = SYSTEM::FLOOR(__678_$BBDA792448DB5A89(v_4) * g_40001._f113F);
                break;
            case 0x50910c31:
                v_4 = g_40001._f2265;
                v_4 = SYSTEM::FLOOR(__678_$BBDA792448DB5A89(v_4) * g_40001._f1140);
                break;
            case 0x9761d9dc:
                v_4 = g_40001._f2266;
                v_4 = SYSTEM::FLOOR(__678_$BBDA792448DB5A89(v_4) * g_40001._f1141);
                break;
            case 0x7decfe30:
                v_4 = g_40001._f2267;
                v_4 = SYSTEM::FLOOR(__678_$BBDA792448DB5A89(v_4) * g_40001._f1142);
                break;
            case 0x3f4e8aa6:
                v_4 = g_40001._f2268;
                v_4 = SYSTEM::FLOOR(__678_$BBDA792448DB5A89(v_4) * g_40001._f1143);
                break;
            case 0x8b808bb:
                v_4 = g_40001._f2269;
                v_4 = SYSTEM::FLOOR(__678_$BBDA792448DB5A89(v_4) * g_40001._f1144);
                break;
            case 0xe28babef:
                v_4 = g_40001._f226A;
                v_4 = SYSTEM::FLOOR(__678_$BBDA792448DB5A89(v_4) * g_40001._f1145);
                break;
            case 0x7af3f785:
                v_4 = g_40001._f226B;
                v_4 = SYSTEM::FLOOR(__678_$BBDA792448DB5A89(v_4) * g_40001._f1146);
                break;
            }
            break;
        case 0xdb1aa450:
            switch (a_1) {
            case 0x476e85ff:
                v_4 = 0;
                break;
            case 0xb92c6979:
                v_4 = g_40001._f227C;
                v_4 = SYSTEM::FLOOR(__678_$BBDA792448DB5A89(v_4) * g_40001._f1148);
                break;
            case ${component_at_pi_supp}:
                v_4 = g_40001._f227D;
                v_4 = SYSTEM::FLOOR(__678_$BBDA792448DB5A89(v_4) * g_40001._f1149);
                break;
            }
            break;
        case 0xdfe37640:
            switch (a_1) {
            case 0x9137a500:
                v_4 = 0;
                break;
            case 0x5b3e7db6:
                v_4 = g_40001._f29CB;
                break;
            case 0xe7939662:
                v_4 = g_40001._f29CC;
                break;
            }
            break;
        case 0xc1b3c3d1:
            switch (a_1) {
            case 0xe9867ce3:
                v_4 = 0;
                break;
            case 0x16ee3040:
                v_4 = g_40001._f2A05;
                break;
            case 0x9493b80d:
                v_4 = g_40001._f29CA;
                break;
            }
            break;
        case 0x624fe830:
            switch (a_1) {
            case 0x513f0a63:
                v_4 = 0;
                break;
            case 0x59ff9bf8:
                v_4 = g_40001._f2DA4;
                break;
            }
            break;
        case 0xef951fbb:
            switch (a_1) {
            case 0x29ea741e:
                v_4 = 0;
                break;
            }
            break;
        default:
            v_45 = sub_5bda(a_0, &v_47);
            if (v_45 != -1) {
                for (v_46 = 0; v_46 < DLC1::GET_NUM_DLC_WEAPON_COMPONENTS(v_45); v_46 += 1) {
                    if (DLC1::GET_DLC_WEAPON_COMPONENT_DATA(v_45, v_46, &v_6E)) {
                        if (v_6E._f3 == a_1) {
                            v_5 = 1.0;
                            if (v_6E._f5 == -1) {
                                v_4 = -1;
                            } else { 
                                v_4 = v_6E._f5;
                            }
                        }
                    }
                }
            }
            break;
        }
    }
    if (NETWORK::NETWORK_IS_GAME_IN_PROGRESS() && sub_58aa()) {
        v_94/*"16"*/ = sub_51bb(a_1, a_0);
        sub_4911(&v_84, v_94, ENTITY::GET_ENTITY_MODEL(PLAYER::PLAYER_PED_ID()), 3, 1, sub_4db5(a_0), -1, -1);
        if (MOBILE::_BD4D7EAF8A30F637(&v_84)) {
            v_4 = UNK3::_NETWORK_SHOP_GET_PRICE(GAMEPLAY::GET_HASH_KEY(&v_84), 0x63a336e1, 1);
        }
    }
    if (v_4 > 0) {
        v_98 = sub_38b5(a_0, &v_4, v_5);
        if (v_98 != 1.0) {}
    }
    return v_4;
}

auto sub_38b5(auto a_0, auto a_1, auto a_2) {
    v_5 = 0.0;
    v_6 = 0.0;
    if (NETWORK::NETWORK_IS_GAME_IN_PROGRESS() && sub_58aa()) {
        return 1.0;
    }
    if (!NETWORK::NETWORK_IS_GAME_IN_PROGRESS()) {
        a_1 = SYSTEM::FLOOR(__678_$BBDA792448DB5A89(a_1) * a_2);
    }
    if (!is_in_transition) {
        if (a_1 != 0) {
            v_7 = sub_440c(a_0);
            if (v_7 == 3) {
                v_6 = 0.1;
            } else if (v_7 == 2) {
                v_6 = 0.15;
            } else if (v_7 == 1) {
                v_6 = 0.25;
            }
        }
    }
    if (l_32 == 1) {
        if (NETWORK::NETWORK_IS_GAME_IN_PROGRESS()) {
            a_1 = SYSTEM::FLOOR(__678_$BBDA792448DB5A89(a_1) * g_40001._f4C);
            v_6 += __678_$BBDA792448DB5A89(g_40001._f76) / 100.0;
        }
    }
    if (l_32 == 0) {
        if (NETWORK::NETWORK_IS_GAME_IN_PROGRESS()) {
            a_1 = SYSTEM::FLOOR(__678_$BBDA792448DB5A89(a_1) * g_40001._f4C);
            if (sub_39cb()) {
                v_6 += __678_$BBDA792448DB5A89(g_40001._f76) / 100.0;
                l_32 = 1;
            } else { 
                l_32 = -1;
            }
        }
    }
    v_5 = 1.0 - v_6;
    a_1 = SYSTEM::FLOOR(__678_$BBDA792448DB5A89(a_1) * v_5);
    return v_5;
}

auto sub_39cb() {
    if (GAMEPLAY::IS_PC_VERSION()) {
        return 0;
    }
    if (sub_6e70()) {
        if (sub_3b03()) {
            v_2 = sub_3a45();
            v_3 = sub_3a29();
            v_4 = (__678_$BBDA792448DB5A89(v_3) / __678_$BBDA792448DB5A89(v_2)) * 100.0;
            if ((v_4 > ((float)g_40001._f75)) && (v_2 >= 8)) {
                return 1;
            }
        }
    }
    return 0;
}

auto sub_3a29() {
    v_2 += g_148FB0;
    v_2 += g_148FB3;
    return v_2;
}

auto sub_3a45() {
    v_2 += g_148FB1;
    v_2 += g_148FB2;
    v_2 += g_148FB0;
    v_2 += g_148FB3;
    v_2 += g_148FB5;
    v_2 += g_148FB4;
    v_2 += sub_a59(0x9f79ba0b);
    v_2 += sub_a59(0x62eb8c5a);
    v_2 += sub_a59(0xe7072cd);
    v_2 += sub_a59(0xaa238ff0);
    v_2 += sub_a59(0x3511a79);
    v_2 += sub_a59(0x3b566d5c);
    v_2 += sub_a59(0x368f6fd9);
    v_2 += sub_a59(0xc2a0aad8);
    v_2 += sub_a59(0x738d415f);
    return v_2;
}

auto sub_3b03() {
    TIME::GET_POSIX_TIME(&v_2, &v_2._f1, &v_2._f2, &v_2._f3, &v_2._f4, &v_2._f5);
    v_9/*{7}*/ = sub_43e8(0xfb63ebdd);
    if (sub_3b47(v_9, v_2, 7)) {
        return 1;
    }
    return 0;
}

auto sub_3b47(auto a_0, auto a_1, auto a_2, auto a_3, auto a_4, auto a_5, auto a_6, auto a_7, auto a_8, auto a_9, auto a_10, auto a_11, auto a_12, auto a_13, auto a_14) {
    v_11 = sub_42ad(a_7);
    v_12 = sub_3ea0(a_0, a_E);
    if (v_12 == -15) {
        return 0;
    }
    if (sub_3b82(v_11, v_12) == 1) {
        return 1;
    }
    return 0;
}

auto sub_3b82(auto a_0, auto a_1) {
    if ((!sub_3d22(a_1)) || (!sub_3d22(a_0))) {
        return 1;
    }
    v_4 = sub_3ce6(a_0);
    v_5 = sub_3ce6(a_1);
    if (v_4 > v_5) {
        return 1;
    } else if (v_4 < v_5) {
        return 0;
    }
    v_4 = sub_3cd9(a_0);
    v_5 = sub_3cd9(a_1);
    if (v_4 > v_5) {
        return 1;
    } else if (v_4 < v_5) {
        return 0;
    }
    v_4 = sub_3cc7(a_0);
    v_5 = sub_3cc7(a_1);
    if (v_4 > v_5) {
        return 1;
    } else if (v_4 < v_5) {
        return 0;
    }
    v_4 = sub_3cb4(a_0);
    v_5 = sub_3cb4(a_1);
    if (v_4 > v_5) {
        return 1;
    } else if (v_4 < v_5) {
        return 0;
    }
    v_4 = sub_3ca1(a_0);
    v_5 = sub_3ca1(a_1);
    if (v_4 > v_5) {
        return 1;
    } else if (v_4 < v_5) {
        return 0;
    }
    v_4 = sub_3c8e(a_0);
    v_5 = sub_3c8e(a_1);
    if (v_4 > v_5) {
        return 1;
    }
    return 0;
}

auto sub_3c8e(auto a_0) {
    return SYSTEM::SHIFT_RIGHT(a_0, 20) & 63;
}

auto sub_3ca1(auto a_0) {
    return SYSTEM::SHIFT_RIGHT(a_0, 14) & 63;
}

auto sub_3cb4(auto a_0) {
    return SYSTEM::SHIFT_RIGHT(a_0, 9) & 31;
}

auto sub_3cc7(auto a_0) {
    return SYSTEM::SHIFT_RIGHT(a_0, 4) & 31;
}

auto sub_3cd9(auto a_0) {
    return a_0 & 15;
}

auto sub_3ce6(auto a_0) {
    return ((SYSTEM::SHIFT_RIGHT(a_0, 26) & 31) * sub_3d0b(GAMEPLAY::IS_BIT_SET(a_0, 31), -1, 1)) + 2011;
}

auto sub_3d0b(auto a_0, auto a_1, auto a_2) {
    if (a_0) {
        return a_1;
    } else { 
        return a_2;
    }
}

auto sub_3d22(auto a_0) {
    if (a_0 == -15) {
        return 0;
    }
    v_3 = sub_3c8e(a_0);
    if ((v_3 < 0) || (v_3 >= 60)) {
        return 0;
    }
    v_4 = sub_3ca1(a_0);
    if ((v_4 < 0) || (v_4 >= 60)) {
        return 0;
    }
    v_5 = sub_3cb4(a_0);
    if ((v_5 < 0) || (v_5 > 23)) {
        return 0;
    }
    v_6 = sub_3ce6(a_0);
    if (((v_6 <= 0) || (v_6 > 2043)) || (v_6 < 1979)) {
        return 0;
    }
    v_7 = sub_3cd9(a_0);
    if ((v_7 < 0) || (v_7 > 11)) {
        return 0;
    }
    v_8 = sub_3cc7(a_0);
    if ((v_8 < 1) || (v_8 > sub_3dfe(v_7, v_6))) {
        return 0;
    }
    return 1;
}

auto sub_3dfe(auto a_0, auto a_1) {
    if (a_1 < 0) {
        a_1 = 0;
    }
    switch (a_0) {
    case 0:
    case 2:
    case 4:
    case 6:
    case 7:
    case 9:
    case 11:
        return 31;
        break;
    case 3:
    case 5:
    case 8:
    case 10:
        return 30;
        break;
    case 1:
        if ((a_1 % 4) == 0) {
            if ((a_1 % 100) != 0) {
                return 29;
            } else if ((a_1 % 400) == 0) {
                return 29;
            }
        }
        return 28;
        break;
    }
    return 30;
}

auto sub_3ea0(auto a_0, auto a_1, auto a_2, auto a_3, auto a_4, auto a_5, auto a_6, auto a_7) {
    if (sub_4257(a_0) == 0) {
        v_A = sub_42ad(a_0);
        v_B = v_A;
        sub_3ee0(&v_B, 0, 0, 0, a_7, 0, 0);
        if (a_7 == 0) {
            v_B = v_A;
        }
        return v_B;
    }
    return v_C;
}

void sub_3ee0(auto a_0, auto a_1, auto a_2, auto a_3, auto a_4, auto a_5, auto a_6) {
    v_9 = sub_3ce6(a_0);
    v_A = sub_3cd9(a_0);
    v_B = sub_3cc7(a_0);
    v_C = sub_3cb4(a_0);
    v_D = sub_3ca1(a_0);
    v_E = sub_3c8e(a_0);
    if ((((((a_6 == 0) && (a_5 == 0)) && (a_4 == 0)) && (a_3 == 0)) && (a_2 == 0)) && (a_1 == 0)) {
        return ;
    }
    if (a_1 < 0) {
        return ;
    }
    if (a_2 < 0) {
        return ;
    }
    if (a_3 < 0) {
        return ;
    }
    if (a_4 < 0) {
        return ;
    }
    if (a_5 < 0) {
        return ;
    }
    if (a_6 < 0) {
        return ;
    }
    v_E += a_1;
    for (; v_E >= 60; v_E -= 60) {
        a_2 += 1;
    }
    v_D += a_2;
    for (; v_D >= 60; v_D -= 60) {
        a_3 += 1;
    }
    v_C += a_3;
    for (; v_C >= 24; v_C -= 24) {
        a_4 += 1;
    }
    v_B += a_4;
    v_F = sub_3dfe(v_A, v_9);
    while (v_B > v_F) {
        v_A += 1;
        v_B -= v_F;
        if (v_A > 11) {
            v_9 += 1;
            v_A -= 12;
        }
        v_F = sub_3dfe(v_A, v_9);
    }
    v_A += a_5;
    for (; v_A > 11; v_A -= 12) {
        a_6 += 1;
    }
    v_9 += a_6;
    sub_4064(a_0, v_E, v_D, v_C, v_B, v_A, v_9);
}

void sub_4064(auto a_0, auto a_1, auto a_2, auto a_3, auto a_4, auto a_5, auto a_6) {
    sub_421b(a_0, a_1);
    sub_41e0(a_0, a_2);
    sub_41a6(a_0, a_3);
    sub_4173(a_0, a_5);
    sub_4122(a_0, a_4);
    sub_409c(a_0, a_6);
}

void sub_409c(auto a_0, auto a_1) {
    if (a_1 <= 0) {
        return ;
    }
    if ((a_1 > 2043) || (a_1 < 1979)) {
        return ;
    }
    a_0 -= a_0 & 0x7c000000;
    if (a_1 < 2011) {
        a_0 |= SYSTEM::SHIFT_LEFT(2011 - a_1, 26);
        a_0 |= 0x80000000;
    } else { 
        a_0 |= SYSTEM::SHIFT_LEFT(a_1 - 2011, 26);
        a_0 -= a_0 & 0x80000000;
    }
}

void sub_4122(auto a_0, auto a_1) {
    v_4 = sub_3cd9(a_0);
    v_5 = sub_3ce6(a_0);
    if ((a_1 < 1) || (a_1 > sub_3dfe(v_4, v_5))) {
        return ;
    }
    a_0 -= a_0 & 496;
    a_0 |= SYSTEM::SHIFT_LEFT(a_1, 4);
}

void sub_4173(auto a_0, auto a_1) {
    if ((a_1 < 0) || (a_1 > 11)) {
        return ;
    }
    a_0 -= a_0 & 15;
    a_0 |= a_1;
}

void sub_41a6(auto a_0, auto a_1) {
    if ((a_1 < 0) || (a_1 > 24)) {
        return ;
    }
    a_0 -= a_0 & 15872;
    a_0 |= SYSTEM::SHIFT_LEFT(a_1, 9);
}

void sub_41e0(auto a_0, auto a_1) {
    if ((a_1 < 0) || (a_1 >= 60)) {
        return ;
    }
    a_0 -= a_0 & 0xfc000;
    a_0 |= SYSTEM::SHIFT_LEFT(a_1, 14);
}

void sub_421b(auto a_0, auto a_1) {
    if ((a_1 < 0) || (a_1 >= 60)) {
        return ;
    }
    a_0 -= a_0 & 0x3f00000;
    a_0 |= SYSTEM::SHIFT_LEFT(a_1, 20);
}

auto sub_4257(auto a_0, auto a_1, auto a_2, auto a_3, auto a_4, auto a_5, auto a_6) {
    if (((((((a_0 == 0) && (a_0._f1 == 0)) && (a_0._f2 == 0)) && (a_0._f3 == 0)) && (a_0._f4 == 0)) && (a_0._f5 == 0)) && (a_0._f6 == 0)) {
        return 1;
    }
    return 0;
}

auto sub_42ad(auto a_0, auto a_1, auto a_2, auto a_3, auto a_4, auto a_5, auto a_6) {
    if (a_0 > 0) {
        sub_409c(&v_9, a_0);
    }
    if (a_0._f1 > 0) {
        sub_4173(&v_9, sub_4323(a_0._f1));
    }
    if (a_0._f2 > 0) {
        sub_4122(&v_9, a_0._f2);
    }
    if (a_0._f3 > 0) {
        sub_41a6(&v_9, a_0._f3);
    }
    if (a_0._f4 > 0) {
        sub_41e0(&v_9, a_0._f4);
    }
    if (a_0._f5 > 0) {
        sub_421b(&v_9, a_0._f5);
    }
    return v_9;
}

auto sub_4323(auto a_0) {
    if (a_0 < 1) {
        return 0;
    }
    if (a_0 > 12) {
        return 0;
    }
    switch (a_0) {
    case 1:
        return 0;
        break;
    case 2:
        return 1;
        break;
    case 3:
        return 2;
        break;
    case 4:
        return 3;
        break;
    case 5:
        return 4;
        break;
    case 6:
        return 5;
        break;
    case 7:
        return 6;
        break;
    case 8:
        return 7;
        break;
    case 9:
        return 8;
        break;
    case 10:
        return 9;
        break;
    case 11:
        return 10;
        break;
    case 12:
        return 11;
        break;
    }
    return 0;
}

auto<7> sub_43e8(auto a_0) {
    v_3 = a_0;
    if (STATS::STAT_GET_DATE(v_3, &v_B, 7, -1)) {
        return v_B;
    }
    return v_4;
}

auto sub_440c(auto a_0) {
    v_3 = sub_4794();
    if ((a_0 == 0) || (!sub_4788(v_3))) {
        return -1;
    }
    v_4 = 7;
    switch (a_0) {
    case ${weapon_unarmed}:
        break;
    case ${gadget_parachute}:
        break;
    case ${weapon_microsmg}:
        v_4 = 1;
        break;
    case ${weapon_smg}:
        v_4 = 1;
        break;
    case ${weapon_sawnoffshotgun}:
        v_4 = 3;
        break;
    case ${weapon_pumpshotgun}:
        v_4 = 3;
        break;
    case ${weapon_assaultshotgun}:
        v_4 = 3;
        break;
    case ${weapon_assaultrifle}:
        v_4 = 2;
        break;
    case ${weapon_carbinerifle}:
        v_4 = 2;
        break;
    case ${weapon_advancedrifle}:
        v_4 = 2;
        break;
    case ${weapon_sniperrifle}:
        break;
    case ${weapon_heavysniper}:
        break;
    case ${weapon_mg}:
        v_4 = 4;
        break;
    case ${weapon_combatmg}:
        v_4 = 4;
        break;
    case ${weapon_rpg}:
        break;
    case ${weapon_grenadelauncher}:
        break;
    case ${weapon_minigun}:
        v_4 = 5;
        break;
    case ${weapon_knife}:
        break;
    case ${weapon_nightstick}:
        break;
    case ${weapon_petrolcan}:
        break;
    case ${weapon_stungun}:
        break;
    case ${weapon_appistol}:
        v_4 = 0;
        break;
    case ${weapon_combatpistol}:
        v_4 = 0;
        break;
    case ${weapon_pistol}:
        v_4 = 0;
        break;
    case ${weapon_smokegrenade}:
        break;
    case ${weapon_grenade}:
        break;
    case ${weapon_stickybomb}:
        break;
    }
    if (v_4 != 7) {
        switch (sub_4668(v_4, v_3)) {
        case 1:
            return 3;
            break;
        case 2:
            return 2;
            break;
        case 3:
            return 1;
            break;
        }
    } else { 
        asm .vardef<F> 6, "[{\"offset\":0,\"value\":6}]"
        v_6[0/*1*/] = sub_4668(1, v_3);
        v_6[1/*1*/] = sub_4668(3, v_3);
        v_6[2/*1*/] = sub_4668(2, v_3);
        v_6[3/*1*/] = sub_4668(4, v_3);
        v_6[4/*1*/] = sub_4668(5, v_3);
        v_6[5/*1*/] = sub_4668(0, v_3);
        v_D = 0;
        for (v_5 = 0; v_5 < 6; v_5 += 1) {
            if (v_6[v_5/*1*/] < 3) {
                v_D = 1;
            }
        }
        if (!v_D) {
            return 1;
        }
        v_D = 0;
        for (v_5 = 0; v_5 < 6; v_5 += 1) {
            if (v_6[v_5/*1*/] < 2) {
                v_D = 1;
            }
        }
        if (!v_D) {
            return 2;
        }
        v_D = 0;
        for (v_5 = 0; v_5 < 6; v_5 += 1) {
            if (v_6[v_5/*1*/] < 1) {
                v_D = 1;
            }
        }
        if (!v_D) {
            return 3;
        }
    }
    return -1;
}

auto sub_4668(auto a_0, auto a_1) {
    if (a_0 == 0) {
        v_4 = 0;
        v_5 = 1;
        v_6 = 2;
        v_7 = -1;
    } else if (a_0 == 1) {
        v_4 = 3;
        v_5 = 4;
        v_6 = 5;
        v_7 = -1;
    } else if (a_0 == 2) {
        v_4 = 9;
        v_5 = 10;
        v_6 = 11;
        v_7 = -1;
    } else if (a_0 == 3) {
        v_4 = 6;
        v_5 = 7;
        v_6 = 8;
        v_7 = -1;
    } else if (a_0 == 4) {
        v_4 = 12;
        v_5 = 13;
        v_6 = 14;
        v_7 = -1;
    } else if (a_0 == 5) {
        v_4 = 15;
        v_5 = 16;
        v_6 = 17;
        v_7 = -1;
    } else if (a_0 == 6) {
        v_4 = 18;
        v_5 = 19;
        v_6 = 20;
        v_7 = 21;
    } else { 
        return 0;
    }
    v_8 = sub_476c(v_4, a_1);
    if (sub_476c(v_5, a_1) < v_8) {
        v_8 = sub_476c(v_5, a_1);
    }
    if (sub_476c(v_6, a_1) < v_8) {
        v_8 = sub_476c(v_6, a_1);
    }
    if (v_7 != -1) {
        if (sub_476c(v_7, a_1) < v_8) {
            v_8 = sub_476c(v_7, a_1);
        }
    }
    return v_8;
}

auto sub_476c(auto a_0, auto a_1) {
    return game_state._f4575[a_1/*271*/]._f3[a_0/*12*/]._f3;
}

auto sub_4788(auto a_0) {
    return a_0 < 3;
}

auto sub_4794() {
    sub_47ad();
    return game_state._f6EA._f21B._fDDD;
}

void sub_47ad() {
    if (ENTITY::DOES_ENTITY_EXIST(PLAYER::PLAYER_PED_ID())) {
        if (sub_48e7(game_state._f6EA._f21B._fDDD) != ENTITY::GET_ENTITY_MODEL(PLAYER::PLAYER_PED_ID())) {
            v_2 = sub_48aa(PLAYER::PLAYER_PED_ID());
            if (sub_4788(v_2) && ((!sub_8c73(14)) || g_18658)) {
                if ((game_state._f6EA._f21B._fDDD != v_2) && sub_4788(game_state._f6EA._f21B._fDDD)) {
                    game_state._f6EA._f21B._fDDE = game_state._f6EA._f21B._fDDD;
                }
                game_state._f6EA._f21B._fDDF = v_2;
                game_state._f6EA._f21B._fDDD = v_2;
                return ;
            }
        } else { 
            if (game_state._f6EA._f21B._fDDD != 145) {
                game_state._f6EA._f21B._fDDF = game_state._f6EA._f21B._fDDD;
            }
            return ;
        }
    }
    game_state._f6EA._f21B._fDDD = 145;
}

auto sub_48aa(auto a_0) {
    if (ENTITY::DOES_ENTITY_EXIST(a_0)) {
        v_4 = ENTITY::GET_ENTITY_MODEL(a_0);
        for (v_3 = 0; v_3 <= 2; v_3 += 1) {
            if (sub_48e7(v_3) == v_4) {
                return v_3;
            }
        }
    }
    return 145;
}

auto sub_48e7(auto a_0) {
    if (sub_4788(a_0)) {
        return game_state._f7F07[a_0/*29*/];
    } else if (a_0 != 145) {}
    return 0;
}

void sub_4911(auto a_0, auto a_1, auto a_2, auto a_3, auto a_4, auto a_5, auto a_6, auto a_7, auto a_8, auto a_9, auto a_10) {
    switch (GAMEPLAY::GET_HASH_KEY(&a_1)) {
    case 0x87d34dd3:
    case 0x3db7a89:
        a_1/*"16"*/ = "GSA_TYPE_R";
        break;
    case 0xb550a881:
    case 0xe74ac9c9:
        a_1/*"16"*/ = "GSA_TYPE_C";
        break;
    case 0xbd4a6d50:
    case 0x140afe8f:
        a_1/*"16"*/ = "GSA_TYPE_RO";
        break;
    case 0xd7eeab1d:
    case 0x1fac7333:
        a_1/*"16"*/ = "GSA_TYPE_CH";
        break;
    case 0x23d285cf:
    case 0x3da36410:
        a_1/*"16"*/ = "GSA_TYPE_G";
        break;
    case 0xcccbd777:
    case 0xf2f4da8d:
        a_1/*"16"*/ = "GSA_TYPE_B";
        break;
    case 0x4e402cb:
    case 0x6a117e27:
        a_1/*"16"*/ = "GSA_TYPE_FW";
        break;
    }
    a_0/*"64"*/ = "";
    switch (a_6) {
    case 0:
        if (a_5 == ${mp_m_freemode_01}) {
            a_0/*"64"*/ = "M";
        } else if (a_5 == ${mp_f_freemode_01}) {
            a_0/*"64"*/ = "F";
        }
        a_0/*64*/ += "_HA_";
        a_0/*64*/ += a_1;
        a_0/*64*/ += "_t";
        a_0/*64*/ += a_7;
        a_0/*64*/ += "_v";
        a_0/*64*/ += a_8;
        break;
    case 1:
        if (a_5 == ${mp_m_freemode_01}) {
            a_0/*"64"*/ = "M";
        } else if (a_5 == ${mp_f_freemode_01}) {
            a_0/*"64"*/ = "F";
        }
        a_0/*64*/ += "_CL_";
        if (a_7 == 12) {
            a_0/*64*/ += "OUTFIT_";
        }
        a_0/*64*/ += a_1;
        if (a_9 != -1) {
            a_0/*64*/ += "_n";
            a_0/*64*/ += a_9;
        }
        a_0/*64*/ += "_t";
        a_0/*64*/ += a_7;
        a_0/*64*/ += "_v";
        a_0/*64*/ += a_8;
        break;
    case 2:
        if (a_5 == ${mp_m_freemode_01}) {
            a_0/*"64"*/ = "M";
        } else if (a_5 == ${mp_f_freemode_01}) {
            a_0/*"64"*/ = "F";
        }
        a_0/*64*/ += "_TA_";
        a_0/*64*/ += a_1;
        a_0/*64*/ += "_t";
        a_0/*64*/ += a_7;
        a_0/*64*/ += "_v";
        a_0/*64*/ += a_8;
        break;
    case 3:
        a_0/*64*/ += "WP_";
        a_0/*64*/ += a_1;
        a_0/*64*/ += "_t";
        a_0/*64*/ += a_7;
        a_0/*64*/ += "_v";
        a_0/*64*/ += a_8;
        break;
    case 4:
        if (a_5 == g_1096F) {
            a_0/*"64"*/ = "VE_BIG_YACHT_t0_v0";
        } else if (a_5 == 0) {
            a_0/*64*/ += "VEM_";
            if ((a_7 == 24) || (a_7 == 25)) {
                if (a_9 == 1) {
                    a_0/*64*/ += "COLOUR_1_";
                } else if (a_9 == 2) {
                    a_0/*64*/ += "COLOUR_2_";
                } else if (a_9 == 3) {
                    a_0/*64*/ += "COLOUR_EXTRA_1_";
                }
                if (a_A == 5) {
                    a_0/*64*/ += "MCT_CHROME_";
                } else if (a_A == 1) {
                    a_0/*64*/ += "MCT_CLASSIC_";
                } else if (a_A == 0) {
                    a_0/*64*/ += "MCT_METALLIC_";
                } else if (a_A == 4) {
                    a_0/*64*/ += "MCT_METALS_";
                } else if (a_A == 3) {
                    a_0/*64*/ += "MCT_MATTE_";
                } else if (a_A == 2) {
                    a_0/*64*/ += "MCT_PEARLESCENT_";
                } else if (a_A == 6) {
                    a_0/*64*/ += "MCT_NONE_";
                }
                a_9 = -1;
            } else if (a_7 == 38) {
                a_0/*64*/ += "COLOUR_5_";
            } else if (a_7 == 65) {
                a_0/*64*/ += "COLOUR_6_";
            }
            a_0/*64*/ += a_1;
            if (a_9 != -1) {
                a_0/*64*/ += "_n";
                a_0/*64*/ += a_9;
            }
            a_0/*64*/ += "_t";
            a_0/*64*/ += a_7;
            a_0/*64*/ += "_v";
            a_0/*64*/ += a_8;
        } else if (a_7 == 22) {
            a_1/*"16"*/ = VEHICLE::GET_DISPLAY_NAME_FROM_VEHICLE_MODEL(a_5);
            if (GAMEPLAY::IS_STRING_NULL_OR_EMPTY(&a_1) || (GAMEPLAY::GET_HASH_KEY(&a_1) == 0xe149b5e8)) {
                return ;
            }
            a_0/*64*/ += "VEM_INSURANCE_";
            a_0/*64*/ += a_1;
            switch (a_5) {
            case ${emperor2}:
            case ${cavalcade2}:
            case ${mesa2}:
            case ${dubsta2}:
            case ${rapidgt2}:
                a_0/*64*/ += "2";
                break;
            case ${mesa3}:
            case ${burrito3}:
            case ${emperor3}:
                a_0/*64*/ += "3";
                break;
            case ${tornado4}:
                a_0/*64*/ += "4";
                break;
            }
        } else if (a_7 == 40) {
            a_1/*"16"*/ = VEHICLE::GET_DISPLAY_NAME_FROM_VEHICLE_MODEL(a_5);
            if (GAMEPLAY::IS_STRING_NULL_OR_EMPTY(&a_1)) {
                return ;
            }
            a_0/*64*/ += "VEU_";
            a_0/*64*/ += a_1;
            a_0/*64*/ += "_t0_v";
            a_0/*64*/ += a_8;
        } else { 
            a_0/*64*/ += "VE_";
            a_0/*64*/ += a_1;
            switch (a_5) {
            case ${emperor2}:
            case ${cavalcade2}:
            case ${mesa2}:
            case ${dubsta2}:
            case ${rapidgt2}:
                a_0/*64*/ += "2";
                break;
            case ${mesa3}:
            case ${burrito3}:
            case ${emperor3}:
                a_0/*64*/ += "3";
                break;
            case ${tornado4}:
                a_0/*64*/ += "4";
                break;
            }
            a_0/*64*/ += "_t";
            a_0/*64*/ += a_7;
            a_0/*64*/ += "_v";
            a_0/*64*/ += a_8;
        }
        break;
    }
}

auto sub_4db5(auto a_0) {
    return sub_4dc3(a_0);
}

auto sub_4dc3(auto a_0) {
    switch (a_0) {
    case ${weapon_unarmed}:
        return 0;
        break;
    case ${weapon_pistol}:
        return 1;
        break;
    case ${weapon_combatpistol}:
        return 2;
        break;
    case ${weapon_appistol}:
        return 3;
        break;
    case 0x99aeeb3b:
        return 4;
        break;
    case ${weapon_smg}:
        return 5;
        break;
    case ${weapon_assaultsmg}:
        return 6;
        break;
    case ${weapon_microsmg}:
        return 7;
        break;
    case ${weapon_assaultrifle}:
        return 8;
        break;
    case ${weapon_carbinerifle}:
        return 9;
        break;
    case ${weapon_heavyrifle}:
        return 10;
        break;
    case ${weapon_advancedrifle}:
        return 11;
        break;
    case ${weapon_mg}:
        return 12;
        break;
    case ${weapon_combatmg}:
        return 13;
        break;
    case ${weapon_assaultmg}:
        return 14;
        break;
    case ${weapon_stickybomb}:
        return 15;
        break;
    case ${weapon_grenade}:
        return 16;
        break;
    case ${weapon_smokegrenade}:
        return 17;
        break;
    case ${weapon_remotesniper}:
        return 18;
        break;
    case ${weapon_assaultsniper}:
        return 19;
        break;
    case ${weapon_sniperrifle}:
        return 20;
        break;
    case ${weapon_heavysniper}:
        return 21;
        break;
    case ${weapon_pumpshotgun}:
        return 22;
        break;
    case ${weapon_bullpupshotgun}:
        return 23;
        break;
    case ${weapon_assaultshotgun}:
        return 24;
        break;
    case ${weapon_sawnoffshotgun}:
        return 25;
        break;
    case ${weapon_grenadelauncher}:
        return 26;
        break;
    case ${weapon_rpg}:
        return 27;
        break;
    case ${weapon_minigun}:
        return 28;
        break;
    case ${weapon_loudhailer}:
        return 29;
        break;
    case ${weapon_programmablear}:
        return 30;
        break;
    case ${weapon_stungun}:
        return 31;
        break;
    case ${weapon_rubbergun}:
        return 32;
        break;
    case ${gadget_parachute}:
        return 33;
        break;
    case ${weapon_knife}:
        return 34;
        break;
    case ${weapon_nightstick}:
        return 35;
        break;
    case ${weapon_hammer}:
        return 36;
        break;
    case ${weapon_bat}:
        return 37;
        break;
    case ${weapon_crowbar}:
        return 38;
        break;
    case ${weapon_golfclub}:
        return 39;
        break;
    case ${weapon_grenadelauncher_smoke}:
        return 40;
        break;
    case ${weapon_molotov}:
        return 41;
        break;
    case ${weapon_fireextinguisher}:
        return 42;
        break;
    case ${weapon_petrolcan}:
        return 43;
        break;
    case ${weapon_digiscanner}:
        return 44;
        break;
    case ${weapon_bottle}:
        return 45;
        break;
    case ${weapon_specialcarbine}:
        return 46;
        break;
    case ${weapon_snspistol}:
        return 47;
        break;
    case ${weapon_heavypistol}:
        return 49;
        break;
    case ${weapon_bullpuprifle}:
        return 48;
        break;
    case 0x61012683:
        return 50;
        break;
    case 0x92a27487:
        return 51;
        break;
    case 0x83839c4:
        return 52;
        break;
    case 0x47757124:
        return 57;
        break;
    case 0xa89cb99e:
        return 53;
        break;
    case 0x7f7497e5:
        return 54;
        break;
    case 0xc734385a:
        return 56;
        break;
    case 0x3aabbbaa:
        return 55;
        break;
    case 0xab564b93:
        return 60;
        break;
    case 0x63ab0442:
        return 61;
        break;
    case 0xf9dcbf2d:
        return 58;
        break;
    case 0x6d544c99:
        return 59;
        break;
    case 0xa3d4d34:
        return 64;
        break;
    case 0xd8df3c3c:
        return 62;
        break;
    case 0xdc4db296:
        return 63;
        break;
    case 0xdd5df8d9:
        return 65;
        break;
    case 0xdb1aa450:
        return 68;
        break;
    case 0xef951fbb:
        return 66;
        break;
    case 0x624fe830:
        return 67;
        break;
    case 0x8bb05fd7:
        return 69;
        break;
    case 0xc1b3c3d1:
        return 70;
        break;
    case 0xdfe37640:
        return 71;
        break;
    }
    return 0;
}

auto sub_51bb(auto a_0, auto a_1) {
    if (a_1 == 0xd8df3c3c) {
        switch (a_0) {
        case 0xf3462f33:
            return "WT_KNUCKLE";
            break;
        case 0xc613f685:
            return "WCT_KNUCK_02";
            break;
        case 0xeed9fd63:
            return "WCT_KNUCK_BG";
            break;
        case 0x50910c31:
            return "WCT_KNUCK_DLR";
            break;
        case 0x9761d9dc:
            return "WCT_KNUCK_DMD";
            break;
        case 0x7decfe30:
            return "WCT_KNUCK_HT";
            break;
        case 0x3f4e8aa6:
            return "WCT_KNUCK_LV";
            break;
        case 0x8b808bb:
            return "WCT_KNUCK_PC";
            break;
        case 0xe28babef:
            return "WCT_KNUCK_SLG";
            break;
        case 0x7af3f785:
            return "WCT_KNUCK_VG";
            break;
        }
    }
    switch (a_0) {
    case 0:
        return "WCT_INVALID";
        break;
    case 0x75414f30:
        return "WCT_RAIL";
        break;
    case ${component_at_ar_afgrip}:
        return "WCT_GRIP";
        break;
    case ${component_at_pi_flsh}:
        return "WCT_FLASH";
        break;
    case ${component_at_ar_flsh}:
        return "WCT_FLASH";
        break;
    case ${component_at_scope_macro}:
        return "WCT_SCOPE_MAC";
        break;
    case 0x3cc6ba57:
        return "WCT_SCOPE_MAC";
        break;
    case ${component_at_scope_small}:
        return "WCT_SCOPE_SML";
        break;
    case 0x3c00afed:
        return "WCT_SCOPE_SML";
        break;
    case ${component_at_scope_medium}:
        return "WCT_SCOPE_MED";
        break;
    case ${component_at_scope_large}:
        return "WCT_SCOPE_LRG";
        break;
    case ${component_at_scope_max}:
        return "WCT_SCOPE_MAX";
        break;
    case ${component_at_pi_supp}:
        return "WCT_SUPP";
        break;
    case ${component_at_ar_supp}:
        return "WCT_SUPP";
        break;
    case ${component_at_ar_supp_02}:
        return "WCT_SUPP";
        break;
    case ${component_at_sr_supp}:
        return "WCT_SUPP";
        break;
    case 0xfed0fd71:
        return "WCT_CLIP1";
        break;
    case 0xed265a1c:
        return "WCT_CLIP2";
        break;
    case 0x721b079:
        return "WCT_CLIP1";
        break;
    case 0xd67b4f2d:
        return "WCT_CLIP2";
        break;
    case 0x31c4b22a:
        return "WCT_CLIP1";
        break;
    case 0x249a17d5:
        return "WCT_CLIP2";
        break;
    case 0xcb48aef0:
        return "WCT_CLIP1";
        break;
    case 0x10e6ba2b:
        return "WCT_CLIP2";
        break;
    case 0x26574997:
        return "WCT_CLIP1";
        break;
    case 0x350966fb:
        return "WCT_CLIP2";
        break;
    case 0xbe5eea16:
        return "WCT_CLIP1";
        break;
    case 0xb1214f9b:
        return "WCT_CLIP2";
        break;
    case 0x9fbe33ec:
        return "WCT_CLIP1";
        break;
    case 0x91109691:
        return "WCT_CLIP2";
        break;
    case 0xfa8fa10f:
        return "WCT_CLIP1";
        break;
    case 0x8ec1c979:
        return "WCT_CLIP2";
        break;
    case 0xf434ef84:
        return "WCT_CLIP1";
        break;
    case 0x82158b47:
        return "WCT_CLIP2";
        break;
    case 0xe1ffb34a:
        return "WCT_CLIP1";
        break;
    case 0xd6c59cd6:
        return "WCT_CLIP2";
        break;
    case 0x94e81bc7:
        return "WCT_CLIP1";
        break;
    case 0x86bd7f72:
        return "WCT_CLIP2";
        break;
    case 0x9bc64089:
        return "WCT_CLIP1";
        break;
    case 0x476f52f4:
        return "WCT_CLIP1";
        break;
    case 0xc8de6f06:
        return "WCT_CLIP2";
        break;
    case 0x8d1307b0:
        return "WCT_CLIP1";
        break;
    case 0xbb46e417:
        return "WCT_CLIP2";
        break;
    case 0x2297be19:
        return "WCT_CLIP1";
        break;
    case 0xd9d3ac92:
        return "WCT_CLIP2";
        break;
    case 0xbaab157:
        return "WCT_CLIP1";
        break;
    case 0x5af49386:
        return "WCT_CLIP1";
        break;
    case 0x6cbf371b:
        return "WCT_CLIP2";
        break;
    case 0xcaebd246:
        return "WCT_CLIP1";
        break;
    case 0xe1c5fffa:
        return "WCT_CLIP2";
        break;
    case 0xf8955d89:
        return "WCT_CLIP1";
        break;
    case 0x3e7e6956:
        return "WCT_CLIP2";
        break;
    case ${component_snspistol_clip_01}:
        return "WCT_CLIP1";
        break;
    case ${component_snspistol_clip_02}:
        return "WCT_CLIP2";
        break;
    case 0x45a3b6bb:
        return "WCT_CLIP1";
        break;
    case 0x33ba12e8:
        return "WCT_CLIP2";
        break;
    case 0x324f2d5f:
        return "WCT_CLIP1";
        break;
    case 0xd83b4141:
        return "WCT_CLIP1";
        break;
    case 0x971cf6fd:
        return "WCT_CLIP2";
        break;
    case 0xccfd2ac5:
        return "WCT_CLIP2";
        break;
    case 0x1c221b1a:
        return "WCT_SCOPE_LRG";
        break;
    case 0x65ea7ebb:
        return "WCT_SUPP";
        break;
    case 0x4317f19e:
        return "WCT_CLIP1";
        break;
    case 0x334a5203:
        return "WCT_CLIP2";
        break;
    case 0xcb9e41ed:
        return "WCT_CLIP1";
        break;
    case 0x476e85ff:
        return "WCT_CLIP1";
        break;
    case 0xb92c6979:
        return "WCT_CLIP2";
        break;
    case 0x4ead7533:
        return "WCT_VAR_GOLD";
        break;
    case 0x377cd377:
        return "WCT_VAR_METAL";
        break;
    case 0xd89b9658:
        return "WCT_VAR_GOLD";
        break;
    case 0x9b76c72c:
        return "WCT_VAR_METAL";
        break;
    case 0xd7391086:
        return "WCT_VAR_GOLD";
        break;
    case 0x77b8ab2f:
        return "WCT_VAR_SIL";
        break;
    case 0x7a6a7b7b:
        return "WCT_VAR_WOOD";
        break;
    case 0x27872c90:
        return "WCT_VAR_GOLD";
        break;
    case 0x487aae09:
        return "WCT_VAR_GOLD";
        break;
    case 0x85a64df9:
        return "WCT_VAR_METAL";
        break;
    case 0x4032b5e7:
        return "WCT_VAR_WOOD";
        break;
    case 0x161e9241:
        return "WCT_VAR_GOLD";
        break;
    case 0x278c78af:
        return "WCT_VAR_GOLD";
        break;
    case 0xa857bc78:
        return "WCT_VAR_METAL";
        break;
    case 0x92feccdd:
        return "WCT_VAR_ETCHM";
        break;
    case 0xc6654d72:
        return "WCT_VAR_GOLD";
        break;
    case 0xd6dababe:
        return "WCT_VAR_GOLD";
        break;
    case 0xa2d79ddb:
        return "WCT_VAR_GOLD";
        break;
    case 0x8033ecaf:
        return "WCT_VAR_WOOD";
        break;
    case 0x730154f2:
        return "WCT_VAR_ETCHM";
        break;
    case 0x9137a500:
        return "WCT_SB_BASE";
        break;
    case 0x5b3e7db6:
        return "WCT_SB_VAR1";
        break;
    case 0xe7939662:
        return "WCT_SB_VAR2";
        break;
    case 0xe9867ce3:
        return "WCT_CLIP1";
        break;
    case 0x16ee3040:
        return "WCT_REV_VARB";
        break;
    case 0x9493b80d:
        return "WCT_REV_VARG";
        break;
    default:
        if (a_1 != 0) {
            v_4 = sub_5bda(a_1, &v_6);
            if (v_4 != -1) {
                for (v_5 = 0; v_5 < DLC1::GET_NUM_DLC_WEAPON_COMPONENTS(v_4); v_5 += 1) {
                    if (DLC1::GET_DLC_WEAPON_COMPONENT_DATA(v_4, v_5, &v_2D)) {
                        if (v_2D._f3 == a_0) {
                            return sub_58a0(&v_2D._f6);
                        }
                    }
                }
            }
        }
        break;
    }
    return "WCT_INVALID";
}

auto sub_58a0(auto a_0) {
    return a_0;
}

auto sub_58aa() {
    if (NETWORK::NETWORK_IS_GAME_IN_PROGRESS() && sub_58c7()) {
        return 1;
    }
    return 0;
}

auto sub_58c7() {
    if (GAMEPLAY::IS_PC_VERSION()) {
        return 1;
    }
    return 0;
}

auto sub_58db() {
    if (GAMEPLAY::IS_BIT_SET(g_19, 6)) {
        if (GAMEPLAY::IS_BIT_SET(g_19, 2) || GAMEPLAY::IS_BIT_SET(g_19, 4)) {
            return 1;
        } else { 
            return 0;
        }
    }
    if (STATS::STAT_GET_INT(0x5da524f8, &v_2, -1)) {
        if (GAMEPLAY::IS_BIT_SET(v_2, 6)) {
            if (GAMEPLAY::IS_BIT_SET(v_2, 2) || GAMEPLAY::IS_BIT_SET(v_2, 4)) {
                return 1;
            } else { 
                return 0;
            }
        }
    }
    if (STATS::STAT_SLOT_IS_LOADED(0)) {
        if (g_21B39._f3) {
            v_4 = 0x3db2bf9e;
            if (STATS::STAT_GET_INT(v_4, &v_3, -1)) {
                if (GAMEPLAY::IS_BIT_SET(v_3, 8)) {
                    return 1;
                }
            }
        }
    }
    if (GAMEPLAY::_5AA3BEFA29F03AD4()) {
        v_5 = GAMEPLAY::GET_PROFILE_SETTING(866);
        if (GAMEPLAY::IS_BIT_SET(v_5, 2) || GAMEPLAY::IS_BIT_SET(v_5, 4)) {
            return 1;
        }
    }
    return 0;
}

auto sub_59ac() {
    if (GAMEPLAY::IS_BIT_SET(g_19, 5)) {
        if (GAMEPLAY::IS_BIT_SET(g_19, 1) || GAMEPLAY::IS_BIT_SET(g_19, 3)) {
            return 1;
        } else { 
            return 0;
        }
    }
    if (STATS::STAT_GET_INT(0x5da524f8, &v_2, -1)) {
        if (GAMEPLAY::IS_BIT_SET(v_2, 5)) {
            if (GAMEPLAY::IS_BIT_SET(v_2, 1) || GAMEPLAY::IS_BIT_SET(v_2, 3)) {
                return 1;
            } else { 
                return 0;
            }
        }
    }
    if (STATS::STAT_SLOT_IS_LOADED(0)) {
        if (g_21B39._f3) {
            v_4 = 0x3db2bf9e;
            if (STATS::STAT_GET_INT(v_4, &v_3, -1)) {
                if (GAMEPLAY::IS_BIT_SET(v_3, 5)) {
                    return 1;
                }
            }
        }
    }
    if (GAMEPLAY::_5AA3BEFA29F03AD4()) {
        v_5 = GAMEPLAY::GET_PROFILE_SETTING(866);
        if (GAMEPLAY::IS_BIT_SET(v_5, 1) || GAMEPLAY::IS_BIT_SET(v_5, 3)) {
            return 1;
        }
    }
    if (NETWORK::NETWORK_IS_SIGNED_IN()) {
        if (NETWORK::_85443FF4C328F53B()) {
            if (NETWORK::_91B87C55093DE351()) {
                STATS::STAT_GET_INT(0x5da524f8, &v_6, -1);
                GAMEPLAY::SET_BIT(&v_6, 1);
                GAMEPLAY::SET_BIT(&v_6, 3);
                GAMEPLAY::SET_BIT(&v_6, 5);
                GAMEPLAY::SET_BIT(&g_19, 1);
                GAMEPLAY::SET_BIT(&g_19, 3);
                GAMEPLAY::SET_BIT(&g_19, 5);
                STATS::STAT_SET_INT(0x5da524f8, v_6, 1);
                if (GAMEPLAY::_5AA3BEFA29F03AD4()) {
                    v_6 = GAMEPLAY::GET_PROFILE_SETTING(866);
                    GAMEPLAY::SET_BIT(&v_6, 1);
                    GAMEPLAY::SET_BIT(&v_6, 3);
                    STATS::_DAC073C7901F9E15(v_6);
                }
                return 1;
            }
        }
    }
    return 0;
}

auto sub_5b00() {
    if (NETWORK::NETWORK_IS_SIGNED_IN()) {
        if (NETWORK::_85443FF4C328F53B()) {
            if (NETWORK::_593570C289A77688()) {
                STATS::STAT_GET_INT(0x5da524f8, &v_2, -1);
                GAMEPLAY::SET_BIT(&v_2, 2);
                GAMEPLAY::SET_BIT(&v_2, 4);
                GAMEPLAY::SET_BIT(&v_2, 6);
                GAMEPLAY::SET_BIT(&g_19, 2);
                GAMEPLAY::SET_BIT(&g_19, 4);
                GAMEPLAY::SET_BIT(&g_19, 6);
                STATS::STAT_SET_INT(0x5da524f8, v_2, 1);
                if (GAMEPLAY::_5AA3BEFA29F03AD4()) {
                    v_2 = GAMEPLAY::GET_PROFILE_SETTING(866);
                    GAMEPLAY::SET_BIT(&v_2, 0);
                    STATS::_DAC073C7901F9E15(v_2);
                }
                return 1;
            }
        }
    }
    if (g_21B38 == 2) {
        return 1;
    } else if (g_21B38 == 3) {
        return 0;
    }
    if (GAMEPLAY::_5AA3BEFA29F03AD4()) {
        if (GAMEPLAY::IS_BIT_SET(GAMEPLAY::GET_PROFILE_SETTING(866), 0)) {
            return 1;
        }
    }
    return 0;
}

void sub_5bbb(auto a_0, auto a_1, auto a_2, auto a_3, auto a_4) {
    a_0 = a_1;
    a_0._f4 = a_2;
    a_0._f5 = a_3;
    a_0._f1 = a_4;
}

auto sub_5bda(auto a_0, auto a_1) {
    v_5 = DLC1::GET_NUM_DLC_WEAPONS();
    for (v_4 = 0; v_4 < v_5; v_4 += 1) {
        if (DLC1::GET_DLC_WEAPON_DATA(v_4, a_1)) {
            if (a_1._f1 == a_0) {
                return v_4;
            }
        }
    }
    return -1;
}

void sub_5c15(auto a_0, auto a_1) {
    if (!PED::IS_PED_INJURED(a_0)) {
        for (v_4 = 0; v_4 <= (44 - 1); v_4 += 1) {
            a_1[v_4/*3*/]._f1 = 0;
        }
        for (v_4 = 0; v_4 <= (44 - 1); v_4 += 1) {
            v_7 = sub_6a19(v_4);
            if (v_7 != 0) {
                v_8 = WEAPON::GET_PED_WEAPONTYPE_IN_SLOT(a_0, sub_6a19(v_4));
                v_8._f1 = 0;
                v_8._f2 = 0;
                if ((v_8 != 0) && (v_8 != ${weapon_unarmed})) {
                    v_8._f1 = WEAPON::GET_AMMO_IN_PED_WEAPON(a_0, v_8);
                    if (v_8 == ${gadget_parachute}) {
                        v_8._f1 = 1;
                    }
                    GAMEPLAY::SET_BIT(&v_8._f2, 20 + WEAPON::GET_PED_WEAPON_TINT_INDEX(a_0, v_8));
                    if (v_8._f1 == -1) {
                        if (!WEAPON::GET_MAX_AMMO(a_0, v_8, &v_8._f1)) {
                            v_8._f1 = 0;
                        }
                    }
                    a_1[v_4/*3*/]._f1 = v_8._f1;
                    v_5 = 0;
                    v_6 = sub_5fbd(v_8, v_5);
                    while (v_6 != 0) {
                        if (WEAPON::HAS_PED_GOT_WEAPON_COMPONENT(a_0, v_8, v_6)) {
                            GAMEPLAY::SET_BIT(&v_8._f2, v_5);
                        }
                        v_5 += 1;
                        v_6 = sub_5fbd(v_8, v_5);
                    }
                }
                a_1[v_4/*3*/]/*{3}*/ = v_8;
            }
        }
        for (v_4 = 0; v_4 <= (50 - 1); v_4 += 1) {
            a_1._f85[v_4/*3*/]._f1 = 0;
        }
        v_C = DLC1::GET_NUM_DLC_WEAPONS();
        for (v_B = 0; v_B < v_C; v_B += 1) {
            if ((DLC1::GET_DLC_WEAPON_DATA(v_B, &v_D) && (!sub_5e79(v_D._f1))) && (v_4A < 50)) {
                if (!DLC1::_IS_OUTFIT_EMPTY(v_D)) {
                    v_8 = v_D._f1;
                    v_8._f1 = 0;
                    v_8._f2 = 0;
                    v_8._f1 = WEAPON::GET_AMMO_IN_PED_WEAPON(a_0, v_8);
                    if (WEAPON::HAS_PED_GOT_WEAPON(a_0, v_8, 0)) {
                        GAMEPLAY::SET_BIT(&v_8._f2, 20 + WEAPON::GET_PED_WEAPON_TINT_INDEX(a_0, v_8));
                    } else { 
                        GAMEPLAY::SET_BIT(&v_8._f2, 20);
                    }
                    if (v_8._f1 == -1) {
                        if (!WEAPON::GET_MAX_AMMO(a_0, v_8, &v_8._f1)) {
                            v_8._f1 = 0;
                        }
                    }
                    a_1._f85[v_4A/*3*/]._f1 = v_8._f1;
                    for (v_5 = 0; v_5 < DLC1::GET_NUM_DLC_WEAPON_COMPONENTS(v_B); v_5 += 1) {
                        if (DLC1::GET_DLC_WEAPON_COMPONENT_DATA(v_B, v_5, &v_34)) {
                            if (WEAPON::HAS_PED_GOT_WEAPON_COMPONENT(a_0, v_8, v_34._f3)) {
                                GAMEPLAY::SET_BIT(&v_8._f2, v_5);
                            }
                        }
                    }
                }
                if (v_8 != 0) {
                    if (!WEAPON::HAS_PED_GOT_WEAPON(a_0, v_8, 0)) {
                        v_8 = 0;
                        v_8._f1 = 0;
                    }
                }
                a_1._f85[v_4A/*3*/]/*{3}*/ = v_8;
                v_4A += 1;
            }
        }
    }
}

auto sub_5e79(auto a_0) {
    if (NETWORK::NETWORK_IS_GAME_IN_PROGRESS()) {
    } else { 
        switch (a_0) {
        case 0x99aeeb3b:
        case ${weapon_bullpupshotgun}:
        case ${weapon_assaultsmg}:
            return 0;
            break;
        case ${weapon_snspistol}:
        case ${weapon_bottle}:
        case 0x61012683:
            return 0;
            break;
        case ${weapon_specialcarbine}:
        case ${weapon_heavypistol}:
            return 0;
            break;
        case ${weapon_bullpuprifle}:
            return 0;
            break;
        case 0x92a27487:
        case 0x83839c4:
            return 0;
            break;
        case 0xa89cb99e:
        case 0x7f7497e5:
            return 0;
            break;
        case 0xc734385a:
        case 0x3aabbbaa:
            return 0;
            break;
        case 0xab564b93:
        case 0x63ab0442:
            return 0;
            break;
        case 0xd8df3c3c:
        case 0xdc4db296:
        case 0xa3d4d34:
            return 0;
            break;
        case 0x8210d4d5:
        case 0x8bb05fd7:
        case ${weapon_programmablear}:
        case 0xa52e2957:
        case 0xc1b3c3d1:
        case ${weapon_heavyrifle}:
        case ${weapon_rubbergun}:
        case 0xd04c944d:
        case 0xd866acd1:
        case ${weapon_assaultmg}:
        case 0xdfe37640:
        case 0xe232c28c:
        case ${weapon_loudhailer}:
        case 0xef951fbb:
        case 0x787f0bb:
        case ${weapon_assaultsniper}:
        case 0x47757124:
        case 0x624fe830:
            return 1;
            break;
        }
    }
    return 0;
}

auto sub_5fbd(auto a_0, auto a_1) {
    v_4 = 0;
    switch (a_0) {
    case ${weapon_pistol}:
        switch (a_1) {
        case 0:
            v_4 = 0xfed0fd71;
            break;
        case 1:
            v_4 = 0xed265a1c;
            break;
        case 2:
            v_4 = ${component_at_pi_flsh};
            break;
        case 3:
            v_4 = 0x65ea7ebb;
            break;
        case 4:
            v_4 = 0xd7391086;
            break;
        }
        break;
    case ${weapon_combatpistol}:
        switch (a_1) {
        case 0:
            v_4 = 0x721b079;
            break;
        case 1:
            v_4 = 0xd67b4f2d;
            break;
        case 2:
            v_4 = ${component_at_pi_flsh};
            break;
        case 3:
            v_4 = ${component_at_pi_supp};
            break;
        case 4:
            v_4 = 0xc6654d72;
            break;
        }
        break;
    case ${weapon_appistol}:
        switch (a_1) {
        case 0:
            v_4 = 0x31c4b22a;
            break;
        case 1:
            v_4 = 0x249a17d5;
            break;
        case 2:
            v_4 = ${component_at_pi_flsh};
            break;
        case 3:
            v_4 = ${component_at_pi_supp};
            break;
        case 4:
            v_4 = 0x9b76c72c;
            break;
        }
        break;
    case ${weapon_microsmg}:
        switch (a_1) {
        case 0:
            v_4 = 0xcb48aef0;
            break;
        case 1:
            v_4 = 0x10e6ba2b;
            break;
        case 2:
            v_4 = ${component_at_pi_flsh};
            break;
        case 3:
            v_4 = ${component_at_scope_macro};
            break;
        case 4:
            v_4 = ${component_at_ar_supp_02};
            break;
        case 5:
            v_4 = 0x487aae09;
            break;
        }
        break;
    case ${weapon_smg}:
        switch (a_1) {
        case 0:
            v_4 = 0x26574997;
            break;
        case 1:
            v_4 = 0x350966fb;
            break;
        case 2:
            v_4 = ${component_at_ar_flsh};
            break;
        case 3:
            v_4 = ${component_at_pi_supp};
            break;
        case 4:
            v_4 = 0x3cc6ba57;
            break;
        case 5:
            v_4 = ${component_at_ar_afgrip};
            break;
        case 6:
            v_4 = 0x27872c90;
            break;
        }
        break;
    case ${weapon_assaultrifle}:
        switch (a_1) {
        case 0:
            v_4 = 0xbe5eea16;
            break;
        case 1:
            v_4 = 0xb1214f9b;
            break;
        case 2:
            v_4 = ${component_at_ar_afgrip};
            break;
        case 3:
            v_4 = ${component_at_ar_flsh};
            break;
        case 4:
            v_4 = ${component_at_scope_macro};
            break;
        case 5:
            v_4 = ${component_at_ar_supp_02};
            break;
        case 6:
            v_4 = 0x4ead7533;
            break;
        }
        break;
    case ${weapon_carbinerifle}:
        switch (a_1) {
        case 0:
            v_4 = 0x9fbe33ec;
            break;
        case 1:
            v_4 = 0x91109691;
            break;
        case 2:
            v_4 = 0x75414f30;
            break;
        case 3:
            v_4 = ${component_at_ar_afgrip};
            break;
        case 4:
            v_4 = ${component_at_ar_flsh};
            break;
        case 5:
            v_4 = ${component_at_scope_medium};
            break;
        case 6:
            v_4 = ${component_at_ar_supp};
            break;
        case 7:
            v_4 = 0xd89b9658;
            break;
        }
        break;
    case ${weapon_advancedrifle}:
        switch (a_1) {
        case 0:
            v_4 = 0xfa8fa10f;
            break;
        case 1:
            v_4 = 0x8ec1c979;
            break;
        case 2:
            v_4 = ${component_at_ar_flsh};
            break;
        case 3:
            v_4 = ${component_at_scope_small};
            break;
        case 4:
            v_4 = ${component_at_ar_supp};
            break;
        case 5:
            v_4 = 0x377cd377;
            break;
        }
        break;
    case ${weapon_mg}:
        switch (a_1) {
        case 0:
            v_4 = 0xf434ef84;
            break;
        case 1:
            v_4 = 0x82158b47;
            break;
        case 2:
            v_4 = 0x3c00afed;
            break;
        case 3:
            v_4 = ${component_at_ar_afgrip};
            break;
        case 4:
            v_4 = 0xd6dababe;
            break;
        }
        break;
    case ${weapon_combatmg}:
        switch (a_1) {
        case 0:
            v_4 = 0xe1ffb34a;
            break;
        case 1:
            v_4 = 0xd6c59cd6;
            break;
        case 2:
            v_4 = ${component_at_ar_afgrip};
            break;
        case 3:
            v_4 = ${component_at_scope_medium};
            break;
        case 4:
            v_4 = 0x92feccdd;
            break;
        }
        break;
    case ${weapon_pumpshotgun}:
        switch (a_1) {
        case 0:
            v_4 = ${component_at_sr_supp};
            break;
        case 1:
            v_4 = ${component_at_ar_flsh};
            break;
        case 2:
            v_4 = 0xa2d79ddb;
            break;
        }
        break;
    case ${weapon_assaultshotgun}:
        switch (a_1) {
        case 0:
            v_4 = 0x94e81bc7;
            break;
        case 1:
            v_4 = 0x86bd7f72;
            break;
        case 2:
            v_4 = ${component_at_ar_afgrip};
            break;
        case 3:
            v_4 = ${component_at_ar_flsh};
            break;
        case 4:
            v_4 = ${component_at_ar_supp};
            break;
        }
        break;
    case ${weapon_sniperrifle}:
        switch (a_1) {
        case 0:
            v_4 = 0x9bc64089;
            break;
        case 1:
            v_4 = ${component_at_scope_large};
            break;
        case 2:
            v_4 = ${component_at_scope_max};
            break;
        case 3:
            v_4 = ${component_at_ar_supp_02};
            break;
        case 4:
            v_4 = 0x4032b5e7;
            break;
        }
        break;
    case ${weapon_heavysniper}:
        switch (a_1) {
        case 0:
            v_4 = 0x476f52f4;
            break;
        case 1:
            v_4 = ${component_at_scope_large};
            break;
        case 2:
            v_4 = ${component_at_scope_max};
            break;
        }
        break;
    case ${weapon_grenadelauncher}:
        switch (a_1) {
        case 0:
            v_4 = ${component_at_ar_afgrip};
            break;
        case 1:
            v_4 = ${component_at_ar_flsh};
            break;
        case 2:
            v_4 = ${component_at_scope_small};
            break;
        }
        break;
    case ${weapon_minigun}:
        switch (a_1) {
        case 0:
            v_4 = 0xc8de6f06;
            break;
        }
        break;
    case ${weapon_assaultsmg}:
        switch (a_1) {
        case 0:
            v_4 = 0x8d1307b0;
            break;
        case 1:
            v_4 = 0xbb46e417;
            break;
        case 2:
            v_4 = ${component_at_ar_flsh};
            break;
        case 3:
            v_4 = ${component_at_scope_macro};
            break;
        case 4:
            v_4 = ${component_at_ar_supp_02};
            break;
        case 5:
            v_4 = 0x278c78af;
            break;
        }
        break;
    case ${weapon_bullpupshotgun}:
        switch (a_1) {
        case 0:
            v_4 = ${component_at_ar_afgrip};
            break;
        case 1:
            v_4 = ${component_at_ar_flsh};
            break;
        case 2:
            v_4 = ${component_at_ar_supp_02};
            break;
        }
        break;
    case 0x99aeeb3b:
        switch (a_1) {
        case 0:
            v_4 = 0x2297be19;
            break;
        case 1:
            v_4 = 0xd9d3ac92;
            break;
        case 2:
            v_4 = ${component_at_pi_flsh};
            break;
        case 3:
            v_4 = ${component_at_ar_supp_02};
            break;
        case 4:
            v_4 = 0x77b8ab2f;
            break;
        }
        break;
    case 0xa3d4d34:
        switch (a_1) {
        case 0:
            v_4 = 0x4317f19e;
            break;
        case 1:
            v_4 = 0x334a5203;
            break;
        case 2:
            v_4 = ${component_at_ar_flsh};
            break;
        case 3:
            v_4 = ${component_at_scope_small};
            break;
        case 4:
            v_4 = ${component_at_ar_afgrip};
            break;
        }
        break;
    case ${weapon_sawnoffshotgun}:
        switch (a_1) {
        case 0:
            v_4 = 0x85a64df9;
            break;
        }
        break;
    case ${weapon_bullpuprifle}:
        switch (a_1) {
        case 0:
            v_4 = ${component_bullpuprifle_clip_01};
            break;
        case 1:
            v_4 = ${component_bullpuprifle_clip_02};
            break;
        case 2:
            v_4 = ${component_at_ar_flsh};
            break;
        case 3:
            v_4 = ${component_at_scope_small};
            break;
        case 4:
            v_4 = ${component_at_ar_supp};
            break;
        case 5:
            v_4 = ${component_at_ar_afgrip};
            break;
        case 6:
            v_4 = 0xa857bc78;
            break;
        }
        break;
    case ${weapon_snspistol}:
        switch (a_1) {
        case 0:
            v_4 = ${component_snspistol_clip_01};
            break;
        case 1:
            v_4 = ${component_snspistol_clip_02};
            break;
        case 2:
            v_4 = 0x8033ecaf;
            break;
        }
        break;
    case ${weapon_specialcarbine}:
        switch (a_1) {
        case 0:
            v_4 = ${component_specialcarbine_clip_01};
            break;
        case 1:
            v_4 = ${component_specialcarbine_clip_02};
            break;
        case 2:
            v_4 = ${component_at_ar_flsh};
            break;
        case 3:
            v_4 = ${component_at_scope_medium};
            break;
        case 4:
            v_4 = ${component_at_ar_supp_02};
            break;
        case 5:
            v_4 = ${component_at_ar_afgrip};
            break;
        case 6:
            v_4 = 0x730154f2;
            break;
        }
        break;
    case 0xd8df3c3c:
        switch (a_1) {
        case 0:
            v_4 = 0xc613f685;
            break;
        case 1:
            v_4 = 0xeed9fd63;
            break;
        case 2:
            v_4 = 0x50910c31;
            break;
        case 3:
            v_4 = 0x9761d9dc;
            break;
        case 4:
            v_4 = 0x7decfe30;
            break;
        case 5:
            v_4 = 0x3f4e8aa6;
            break;
        case 6:
            v_4 = 0x8b808bb;
            break;
        case 7:
            v_4 = 0xe28babef;
            break;
        case 8:
            v_4 = 0x7af3f785;
            break;
        }
        break;
    case 0xdb1aa450:
        switch (a_1) {
        case 0:
            v_4 = 0x476e85ff;
            break;
        case 1:
            v_4 = 0xb92c6979;
            break;
        case 2:
            v_4 = ${component_at_pi_supp};
            break;
        }
        break;
    case 0xdfe37640:
        switch (a_1) {
        case 0:
            v_4 = 0x5b3e7db6;
            break;
        case 1:
            v_4 = 0xe7939662;
            break;
        }
        break;
    case 0xc1b3c3d1:
        switch (a_1) {
        case 0:
            v_4 = 0xe9867ce3;
            break;
        case 1:
            v_4 = 0x16ee3040;
            break;
        case 2:
            v_4 = 0x9493b80d;
            break;
        }
        break;
    default:
        if (a_0 != 0) {
            v_5 = sub_5bda(a_0, &v_6);
            if (v_5 != -1) {
                if (a_1 < DLC1::GET_NUM_DLC_WEAPON_COMPONENTS(v_5)) {
                    if (DLC1::GET_DLC_WEAPON_COMPONENT_DATA(v_5, a_1, &v_2D)) {
                        return v_2D._f3;
                    }
                }
            }
        }
        break;
    }
    return v_4;
}

auto sub_6a19(auto a_0) {
    v_3 = 0;
    switch (a_0) {
    case 0:
        v_3 = ${slot_unarmed};
        break;
    case 1:
        v_3 = ${slot_knife};
        break;
    case 2:
        v_3 = ${slot_nightstick};
        break;
    case 3:
        v_3 = ${slot_hammer};
        break;
    case 4:
        v_3 = ${slot_bat};
        break;
    case 5:
        v_3 = ${slot_crowbar};
        break;
    case 6:
        v_3 = ${slot_golfclub};
        break;
    case 7:
        v_3 = ${slot_stungun};
        break;
    case 8:
        v_3 = ${slot_pistol};
        break;
    case 9:
        v_3 = ${slot_combatpistol};
        break;
    case 10:
        v_3 = ${slot_appistol};
        break;
    case 11:
        v_3 = ${slot_microsmg};
        break;
    case 12:
        v_3 = ${slot_smg};
        break;
    case 13:
        v_3 = ${slot_assaultrifle};
        break;
    case 14:
        v_3 = ${slot_carbinerifle};
        break;
    case 15:
        v_3 = ${slot_advancedrifle};
        break;
    case 16:
        v_3 = ${slot_mg};
        break;
    case 17:
        v_3 = ${slot_combatmg};
        break;
    case 18:
        v_3 = ${slot_pumpshotgun};
        break;
    case 19:
        v_3 = ${slot_sawnoffshotgun};
        break;
    case 20:
        v_3 = ${slot_assaultshotgun};
        break;
    case 21:
        v_3 = ${slot_sniperrifle};
        break;
    case 22:
        v_3 = ${slot_heavysniper};
        break;
    case 23:
        v_3 = ${slot_grenadelauncher};
        break;
    case 24:
        v_3 = ${slot_rpg};
        break;
    case 25:
        v_3 = ${slot_minigun};
        break;
    case 26:
        v_3 = ${slot_grenade};
        break;
    case 27:
        v_3 = ${slot_stickybomb};
        break;
    case 28:
        v_3 = ${slot_smokegrenade};
        break;
    case 29:
        v_3 = ${slot_molotov};
        break;
    case 30:
        v_3 = ${slot_fireextinguisher};
        break;
    case 31:
        v_3 = ${slot_petrolcan};
        break;
    case 33:
        v_3 = ${slot_parachute};
        break;
    case 34:
        v_3 = ${slot_digiscanner};
        break;
    case 35:
        v_3 = ${slot_object};
        break;
    case 36:
        v_3 = ${slot_assaultsmg};
        break;
    case 37:
        v_3 = ${slot_bullpupshotgun};
        break;
    case 38:
        v_3 = 0x22541ebe;
        break;
    }
    return v_3;
}

auto sub_6c8d(auto a_0) {
    if (sub_6d24(a_0)) {
        if (sub_6d14(a_0)) {
            return a_0._f2;
        } else { 
            return sub_6ccc(GAMEPLAY::IS_BIT_SET(a_0, 4)) - a_0._f1;
        }
    } else { 
        return a_0._f1;
    }
}

auto sub_6ccc(auto a_0) {
    if (a_0) {
        return __678_$BBDA792448DB5A89(GAMEPLAY::GET_GAME_TIMER()) / 1000.0;
    }
    if (NETWORK::NETWORK_IS_GAME_IN_PROGRESS()) {
        v_3 = NETWORK::GET_NETWORK_TIME();
        return __678_$BBDA792448DB5A89(v_3) / 1000.0;
    }
    return __678_$BBDA792448DB5A89(GAMEPLAY::GET_GAME_TIMER()) / 1000.0;
}

auto sub_6d14(auto a_0) {
    return GAMEPLAY::IS_BIT_SET(a_0, 2);
}

auto sub_6d24(auto a_0) {
    return GAMEPLAY::IS_BIT_SET(a_0, 1);
}

auto sub_6d34() {
    if (g_1406BE) {
        return 1;
    }
    if (sub_6d70()) {
        return 1;
    }
    if (sub_6d64()) {
        return 1;
    }
    return sub_4da(124, -1);
}

auto sub_6d64() {
    return g_14143B;
}

auto sub_6d70() {
    return g_14143D;
}

void sub_6d7c() {
    for (v_2 = 1; v_2 <= 49; v_2 += 1) {
        if (!PLAYER::HAS_ACHIEVEMENT_BEEN_PASSED(v_2)) {
            if (SOCIALCLUB::_418DC16FAE452C1C(v_2)) {
                sub_75c7(v_2, 1);
            }
        }
    }
    for (v_2 = 51; v_2 <= 59; v_2 += 1) {
        if (!PLAYER::HAS_ACHIEVEMENT_BEEN_PASSED(v_2)) {
            if (SOCIALCLUB::_418DC16FAE452C1C(v_2)) {
                sub_75c7(v_2, 1);
            }
        }
    }
}

auto sub_6de1(auto a_0, auto a_1) {
    if (a_1 == -1) {
        a_1 = sub_53a();
    }
    v_4 = sub_6e0d(a_1);
    v_5 = GAMEPLAY::GET_PROFILE_SETTING(v_4);
    return GAMEPLAY::IS_BIT_SET(v_5, a_0);
}

auto sub_6e0d(auto a_0) {
    if (a_0 == -1) {
        a_0 = sub_53a();
    }
    switch (a_0) {
    case 0:
        v_3 = 914;
        break;
    case 1:
        v_3 = 915;
        break;
    case 2:
        v_3 = 916;
        break;
    case 3:
        v_3 = 917;
        break;
    case 4:
        v_3 = 918;
        break;
    }
    return v_3;
}

auto sub_6e70() {
    if (sub_6e9e() && sub_6e8e(0)) {
        return 1;
    }
    return 0;
}

auto sub_6e8e(auto a_0) {
    return g_140671[a_0/*1*/];
}

auto sub_6e9e() {
    return sub_6e8e(sub_53a() + 1);
}

auto sub_6eb0(auto a_0) {
    return a_0._f47 == 1;
}

void sub_6ebe(auto a_0) {
    v_3 = g_270EC9;
    a_0._f48 += GAMEPLAY::GET_FRAME_TIME();
    if (!sub_6eb0(a_0)) {
        return ;
    }
    if (sub_7076(a_0) < 0.0) {
        sub_7059(a_0, 0);
        return ;
    }
    if (sub_8c73(14)) {
        v_3 = 10.0;
    }
    if (sub_7076(a_0) < v_3) {
        return ;
    }
    if (sub_7048(a_0, 0)) {
        return ;
    }
    if (sub_6fae(a_0[0/*1*/])) {
        sub_6f77(a_0);
        sub_6f46(a_0);
        sub_7059(a_0, 0);
    }
}

void sub_6f46(auto a_0) {
    for (v_3 = 0; v_3 < a_0; v_3 += 1) {
        if (sub_7048(a_0, v_3)) {
            v_3 = a_0 + 100;
        } else { }
    }
}

void sub_6f77(auto a_0) {
    v_3 = 1;
    if (sub_7048(a_0, 0)) {
        return ;
    }
    for (; v_3 < a_0; v_3 += 1) {
        a_0[v_3 - 1/*1*/] = a_0[v_3/*1*/];
    }
}

auto sub_6fae(auto a_0) {
    if (PLAYER::HAS_ACHIEVEMENT_BEEN_PASSED(a_0)) {
        return 0;
    }
    if (sub_8c73(14) && (!sub_6ff8(a_0))) {
        return 0;
    }
    if (!PLAYER::GIVE_ACHIEVEMENT_TO_PLAYER(a_0)) {
        return 0;
    }
    if (PLAYER::HAS_ACHIEVEMENT_BEEN_PASSED(a_0)) {
        return 1;
    }
    return 0;
}

auto sub_6ff8(auto a_0) {
    switch (a_0) {
    case 60:
    case 61:
    case 62:
    case 63:
    case 64:
    case 65:
    case 66:
    case 67:
    case 68:
    case 69:
        return 1;
    }
    return 0;
}

auto sub_7048(auto a_0, auto a_1) {
    return a_0[a_1/*1*/] == 70;
}

void sub_7059(auto a_0, auto a_1) {
    if (a_1 == 0.0) {
        a_0._f48 = 0.0;
    } else { 
        a_0._f48 = a_1;
    }
}

auto sub_7076(auto a_0) {
    return a_0._f48;
}

auto sub_7082() {
    if (NETWORK::NETWORK_IS_GAME_IN_PROGRESS() || is_in_transition) {
        return 0;
    }
    if (PLAYER::IS_PLAYER_PLAYING(PLAYER::PLAYER_ID())) {
        if (PLAYER::IS_PLAYER_CONTROL_ON(PLAYER::PLAYER_ID())) {
            v_2 = UI::_E0130B41D3CF4574();
            if ((v_2 > 0.009999999999999998) && GAMEPLAY::IS_PC_VERSION()) {
                sub_77ea(14, SYSTEM::FLOOR(v_2 * 100.0));
            }
            if (v_2 >= 0.975) {
                sub_75c7(14, 1);
                return 1;
            }
        }
    }
    return 0;
}

auto sub_70fa(auto a_0) {
    if ((a_0 == 94) || (a_0 == -1)) {
        return 0;
    }
    return game_state._f1E27._f14A[a_0/*6*/];
}

void sub_7126(auto a_0) {
    if (is_in_transition) {
        if (a_0) {
            sub_901(a_0);
        }
        sub_45f(a_0);
        sub_a77(a_0);
        if (a_0) {}
    }
    sub_7510(a_0);
    sub_723f(a_0);
    sub_71e8();
    sub_717a();
    if (a_0) {
        if (sub_6d24(&l_3C)) {}
    }
}

auto sub_717a() {
    if (PLAYER::HAS_ACHIEVEMENT_BEEN_PASSED(50)) {
        return 0;
    }
    v_2 = 0;
    v_3 = 0;
    v_2 += STATS::_E0E854F5280FB769(0xf50c6ef4) * 24;
    v_2 += STATS::_F2D4B2FE415AAFC3(0xf50c6ef4);
    v_3 += STATS::_E0E854F5280FB769(0x45079a32) * 24;
    v_3 += STATS::_F2D4B2FE415AAFC3(0x45079a32);
    if ((v_2 + v_3) >= 15) {
        sub_75c7(50, 1);
        return 1;
    }
    return 0;
}

auto sub_71e8() {
    if (PLAYER::HAS_ACHIEVEMENT_BEEN_PASSED(22)) {
        return 0;
    }
    v_2 = GAMEPLAY::_996DD1E1E02F1008();
    if (v_2 > 0) {
        if (g_6320 < v_2) {
            if (g_6320 >= 0) {
                sub_77ea(22, v_2);
            } else { }
            g_6320 = v_2;
        }
    }
    if (GAMEPLAY::_996DD1E1E02F1008() >= 50) {
        sub_75c7(22, 1);
        return 1;
    }
    return 0;
}

auto sub_723f(auto a_0) {
    if (PLAYER::HAS_ACHIEVEMENT_BEEN_PASSED(17)) {
        return 0;
    }
    asm .vardef<F> 3, "[{\"offset\":0,\"value\":6}]"
    v_3[0/*1*/] = sub_74df();
    v_3[1/*1*/] = sub_74ac();
    v_3[2/*1*/] = sub_7478();
    v_3[3/*1*/] = sub_7444();
    v_3[4/*1*/] = sub_73ce();
    v_3[5/*1*/] = sub_7361();
    v_A = 0;
    for (v_B = 0; v_B < 6; v_B += 1) {
        if (v_3[v_B/*1*/]) {
            v_A += 1;
        }
    }
    STATS::STAT_GET_INT(0xdc6f4c73, &v_C, -1);
    if ((v_A > v_C) && (v_A > 0)) {
        STATS::STAT_SET_INT(0xdc6f4c73, v_A, 1);
        sub_77ea(17, v_A);
    }
    if (a_0) {}
    if (!v_3[0/*1*/]) {
        if (a_0) {}
        return 0;
    }
    if (!v_3[1/*1*/]) {
        if (a_0) {}
        return 0;
    }
    if (!v_3[2/*1*/]) {
        if (a_0) {}
        return 0;
    }
    if (!v_3[3/*1*/]) {
        if (a_0) {}
        return 0;
    }
    if (!v_3[4/*1*/]) {
        if (a_0) {}
        return 0;
    }
    if (!v_3[5/*1*/]) {
        if (a_0) {}
        return 0;
    }
    sub_75c7(17, 1);
    return 1;
}

auto sub_7361() {
    v_2 = 0;
    for (v_2 = 0; v_2 < 12; v_2 += 1) {
        if (game_state._f573[0/*121*/][v_2/*10*/]._f8 == 3) {
            return 1;
        } else if (game_state._f573[1/*121*/][v_2/*10*/]._f8 == 3) {
            return 1;
        } else if (game_state._f573[2/*121*/][v_2/*10*/]._f8 == 3) {
            return 1;
        }
    }
    return 0;
}

auto sub_73ce() {
    v_2 = 0;
    for (v_2 = 0; v_2 < 22; v_2 += 1) {
        if (game_state._f4575[0/*271*/]._f3[v_2/*12*/]._f3 == 3) {
            return 1;
        } else if (game_state._f4575[1/*271*/]._f3[v_2/*12*/]._f3 == 3) {
            return 1;
        } else if (game_state._f4575[2/*271*/]._f3[v_2/*12*/]._f3 == 3) {
            return 1;
        }
    }
    return 0;
}

auto sub_7444() {
    v_2 = 0;
    for (v_2 = 0; v_2 < 4; v_2 += 1) {
        if (GAMEPLAY::IS_BIT_SET(game_state._f7305._f1, v_2)) {
            return 1;
        }
    }
    return 0;
}

auto sub_7478() {
    v_2 = 0;
    for (v_2 = 0; v_2 < 5; v_2 += 1) {
        if (GAMEPLAY::IS_BIT_SET(game_state._f7308._f2, v_2)) {
            return 1;
        }
    }
    return 0;
}

auto sub_74ac() {
    v_2 = 0;
    for (v_2 = 0; v_2 < 7; v_2 += 1) {
        if (game_state._f44F2._f13[v_2/*1*/] == 1) {
            return 1;
        }
    }
    return 0;
}

auto sub_74df() {
    v_2 = 0;
    for (v_2 = 0; v_2 < 3; v_2 += 1) {
        if (game_state._f48D5[v_2/*1*/] == 1) {
            return 1;
        }
    }
    return 0;
}

auto sub_7510(auto a_0) {
    v_4 = 0;
    if (PLAYER::HAS_ACHIEVEMENT_BEEN_PASSED(27)) {
        return 0;
    }
    if (STATS::STAT_GET_INT(0xd8dde3ac, &v_3, -1)) {
        v_4 += v_3;
    }
    if (STATS::STAT_GET_INT(0x82f04461, &v_3, -1)) {
        v_4 += v_3;
    }
    if (STATS::STAT_GET_INT(0x5e1032a2, &v_3, -1)) {
        v_4 += v_3;
    }
    if (a_0) {}
    v_5 = 0;
    STATS::STAT_GET_INT(0xe6d69c91, &v_5, -1);
    if ((v_4 > 0) && ((v_5 / 0x1e8480) != (v_4 / 0x1e8480))) {
        STATS::STAT_SET_INT(0xe6d69c91, v_4, 1);
        sub_77ea(27, v_4);
    }
    if (v_4 < 0xbebc200) {
        return 0;
    }
    sub_75c7(27, 1);
    return 1;
}

auto sub_75c7(auto a_0, auto a_1) {
    if (a_0 >= 70) {
        return 0;
    }
    return sub_75e2(a_0, a_1);
}

auto sub_75e2(auto a_0, auto a_1) {
    if (sub_8c73(14) && (!sub_6ff8(a_0))) {
        return 0;
    }
    if (PLAYER::HAS_ACHIEVEMENT_BEEN_PASSED(a_0) && (a_1 == 1)) {
        return 0;
    }
    if ((g_6311 != 0) && (!is_in_transition)) {
        return 0;
    }
    if (sub_6eb0(&g_270ECA)) {
        if (sub_77ab(&g_270ECA, a_0)) {
            return 0;
        }
        if (sub_767f(&g_270ECA, a_0)) {
            return 1;
        }
    } else { 
        if (!PLAYER::GIVE_ACHIEVEMENT_TO_PLAYER(a_0)) {
            return 0;
        }
        if (PLAYER::HAS_ACHIEVEMENT_BEEN_PASSED(a_0)) {
            return 1;
        }
        return 0;
    }
    return 0;
}

auto sub_767f(auto a_0, auto a_1) {
    asm .vardef<F> 5, "[{\"type\":\"field\",\"value\":[{\"offset\":0,\"value\":70}]}]"
    if (PLAYER::HAS_ACHIEVEMENT_BEEN_PASSED(a_1)) {
        return 0;
    }
    if (sub_8c73(14) && (!sub_6ff8(a_1))) {
        return 0;
    }
    if (sub_77ab(a_0, a_1)) {
        return 0;
    }
    if (sub_7076(a_0) < 0.0) {
        sub_7059(a_0, 0);
    }
    sub_8cf1(&v_5);
    v_4 = 0;
    for (v_4 = 0; v_4 < (a_0 - 1); v_4 += 1) {
        v_5[v_4 + 1/*1*/] = a_0[v_4/*1*/];
    }
    sub_7730(&v_5, a_1);
    v_4 = 0;
    for (v_4 = 0; v_4 < a_0; v_4 += 1) {
        a_0[v_4/*1*/] = v_5[v_4/*1*/];
    }
    return 1;
}

auto sub_7730(auto a_0, auto a_1) {
    if (PLAYER::HAS_ACHIEVEMENT_BEEN_PASSED(a_1)) {
        return 0;
    }
    if (sub_8c73(14) && (!sub_6ff8(a_1))) {
        return 0;
    }
    if (sub_77ab(a_0, a_1)) {
        return 0;
    }
    if (sub_7076(a_0) < 0.0) {
        sub_7059(a_0, 0);
    }
    for (v_4 = 0; v_4 < a_0; v_4 += 1) {
        if (sub_7048(a_0, v_4)) {
            a_0[v_4/*1*/] = a_1;
            return 1;
        }
    }
    return 0;
}

auto sub_77ab(auto a_0, auto a_1) {
    return sub_77bd(a_0, a_1) != -1;
}

auto sub_77bd(auto a_0, auto a_1) {
    for (v_4 = 0; v_4 < a_0; v_4 += 1) {
        if (a_0[v_4/*1*/] == a_1) {
            return v_4;
        }
    }
    return -1;
}

auto sub_77ea(auto a_0, auto a_1) {
    if (a_0 < 0) {
        return 0;
    }
    if (a_0 > 70) {
        return 0;
    }
    if ((a_1 <= 0) || (a_1 > 100)) {
        return 0;
    }
    v_4 = PLAYER::_1C186837D0619335(a_0);
    if (a_1 > v_4) {
        return PLAYER::_C2AFFFDABBDC2C5C(a_0, a_1);
    } else { }
    return 0;
}

auto sub_783b(auto a_0) {
    v_3 = sub_8793(a_0) + sub_7859(a_0);
    if (a_0) {}
    return v_3;
}

auto sub_7859(auto a_0) {
    v_6 = 0;
    v_7 = 0;
    if (a_0) {}
    for (v_3 = 0; v_3 < game_state._f4338; v_3 += 1) {
        if ((game_state._f4338[v_3/*6*/]._f3 != -1) && sub_840c(v_3, 7)) {
            v_6 = 0;
            v_7 = 0;
            for (v_8 = 0; v_8 < sub_8220(v_3, 7); v_8 += 1) {
                v_A = sub_7af7(v_3, 7, v_8);
                if (!g_DA4C[v_A/*13*/]._f7) {
                    if (sub_79e1(v_A) == 1) {
                        v_7 += 1;
                    }
                    v_6 += 1;
                }
            }
            v_9 = sub_7982(v_7, v_6, 0);
            v_5 = sub_794d(v_9);
            if ((v_3 >= 52) && (v_3 <= 56)) {
                if (a_0) {}
                v_5 = game_state._f6DF[v_3 - 52/*2*/];
                v_9 = 0.0;
            }
            if ((v_9 >= 100.0) || (v_5 == 3)) {
                v_4 += 1;
            }
        }
    }
    if (a_0) {}
    return v_4;
}

auto sub_794d(auto a_0) {
    if (a_0 == 0.0) {
        return 0;
    }
    if (a_0 == 100.0) {
        return 3;
    } else if (a_0 > 50.0) {
        return 2;
    }
    return 1;
}

auto sub_7982(auto a_0, auto a_1, auto a_2) {
    if (a_2) {
        return 0.0;
    }
    if (a_0 == a_1) {
        return 100.0;
    }
    v_5 = __678_$BBDA792448DB5A89(a_0) / __678_$BBDA792448DB5A89(a_1);
    v_6 = (50.0 * v_5) + 50.0;
    v_6 = __678_$BBDA792448DB5A89(SYSTEM::CEIL(v_6));
    if (v_6 > 100.0) {
        v_6 = 100.0;
    }
    return v_6;
}

auto sub_79e1(auto a_0) {
    if (sub_7a04(a_0, sub_7ace(g_DA4C[a_0/*13*/]._f4))) {
        return 1;
    }
    return 0;
}

auto sub_7a04(auto a_0, auto a_1) {
    if (a_1 < 0) {
        return 0;
    }
    switch (g_DA4C[a_0/*13*/]) {
    case 1:
    case 2:
    case 4:
    case 5:
    case 17:
        if (a_1 < 1) {
            return 0;
        }
        break;
    }
    if (a_1 == 0x7fffffff) {
        return 0;
    }
    if ((((a_0 == 881) || (a_0 == 889)) || (a_0 == 897)) && (game_state._f72BD[4/*4*/] == sub_4794())) {
        g_DA4C[a_0/*13*/]._f2 = 0;
    }
    if (g_DA4C[a_0/*13*/]._f3) {
        if (a_1 < g_DA4C[a_0/*13*/]._f2) {
            return 1;
        }
    } else if (a_1 >= g_DA4C[a_0/*13*/]._f2) {
        return 1;
    }
    return 0;
}

auto sub_7ace(auto a_0) {
    if (a_0 == 0) {
        return -1;
    }
    if (STATS::STAT_GET_INT(a_0, &v_3, -1)) {
        return v_3 - 1;
    } else { 
        return -1;
    }
}

auto sub_7af7(auto a_0, auto a_1, auto a_2) {
    switch (a_1) {
    case 1:
        return g_14133[a_0/*34*/]._f11[a_2/*1*/];
        break;
    case 7:
        return sub_7b3a(a_0, a_2);
        break;
    default:
        break;
    }
    return 914;
}

auto sub_7b3a(auto a_0, auto a_1) {
    switch (a_0) {
    case 2:
        switch (a_1) {
        case 0:
            return 741;
        case 1:
            return 742;
        }
        return -1;
    case 3:
        switch (a_1) {
        case 0:
            return 743;
        case 1:
            return 744;
        }
        return -1;
    case 5:
        switch (a_1) {
        case 0:
            return 745;
        case 1:
            return 746;
        }
        return -1;
    case 6:
        switch (a_1) {
        case 0:
            return 747;
        case 1:
            return 748;
        }
        return -1;
    case 8:
        switch (a_1) {
        case 0:
            return 749;
        }
        return -1;
    case 12:
        switch (a_1) {
        case 0:
            return 750;
        }
        return -1;
    case 14:
        switch (a_1) {
        case 0:
            return 751;
        case 1:
            return 752;
        }
        return -1;
    case 16:
        switch (a_1) {
        case 0:
            return 753;
        case 1:
            return 754;
        }
        return -1;
    case 17:
        switch (a_1) {
        case 0:
            return 755;
        case 1:
            return 756;
        case 2:
            return 757;
        }
        return -1;
    case 18:
        switch (a_1) {
        case 0:
            return 758;
        case 1:
            return 759;
        }
        return -1;
    case 19:
        switch (a_1) {
        case 0:
            return 760;
        case 1:
            return 761;
        }
        return -1;
    case 20:
        switch (a_1) {
        case 0:
            return 762;
        }
        return -1;
    case 21:
        switch (a_1) {
        case 0:
            return 763;
        }
        return -1;
    case 22:
        switch (a_1) {
        case 0:
            return 764;
        case 1:
            return 765;
        }
        return -1;
    case 23:
        switch (a_1) {
        case 0:
            return 766;
        }
        return -1;
    case 25:
        switch (a_1) {
        case 0:
            return 767;
        case 1:
            return 768;
        case 2:
            return 769;
        }
        return -1;
    case 26:
        switch (a_1) {
        case 0:
            return 770;
        case 1:
            return 771;
        }
        return -1;
    case 28:
        switch (a_1) {
        case 0:
            return 772;
        case 1:
            return 773;
        }
        return -1;
    case 29:
        switch (a_1) {
        case 0:
            return 774;
        case 1:
            return 775;
        }
        return -1;
    case 30:
        switch (a_1) {
        case 0:
            return 776;
        case 1:
            return 777;
        }
        return -1;
    case 32:
        switch (a_1) {
        case 0:
            return 778;
        case 1:
            return 779;
        }
        return -1;
    }
    switch (a_0) {
    case 33:
        switch (a_1) {
        case 0:
            return 780;
        case 1:
            return 781;
        case 2:
            return 782;
        }
        return -1;
    case 34:
        switch (a_1) {
        case 0:
            return 783;
        case 1:
            return 784;
        }
        return -1;
    case 38:
        switch (a_1) {
        case 0:
            return 785;
        case 1:
            return 786;
        }
        return -1;
    case 39:
        switch (a_1) {
        case 0:
            return 787;
        case 1:
            return 788;
        }
        return -1;
    case 40:
        switch (a_1) {
        case 0:
            return 789;
        }
        return -1;
    case 41:
        switch (a_1) {
        case 0:
            return 790;
        case 1:
            return 791;
        case 2:
            return 792;
        }
        return -1;
    case 42:
        switch (a_1) {
        case 0:
            return 793;
        case 1:
            return 794;
        case 2:
            return 795;
        }
        return -1;
    case 43:
        switch (a_1) {
        case 0:
            return 796;
        case 1:
            return 797;
        }
        return -1;
    case 46:
        switch (a_1) {
        case 0:
            return 798;
        case 1:
            return 799;
        }
        return -1;
    case 47:
        switch (a_1) {
        case 0:
            return 800;
        case 1:
            return 801;
        }
        return -1;
    case 49:
        switch (a_1) {
        case 0:
            return 802;
        case 1:
            return 803;
        }
        return -1;
    case 50:
        switch (a_1) {
        case 0:
            return 804;
        case 1:
            return 805;
        }
        return -1;
    case 51:
        switch (a_1) {
        case 0:
            return 806;
        }
        return -1;
    case 57:
        switch (a_1) {
        case 0:
            return 807;
        case 1:
            return 808;
        case 2:
            return 809;
        }
        return -1;
    case 58:
        switch (a_1) {
        case 0:
            return 828;
        case 1:
            return 829;
        case 2:
            return 830;
        }
        return -1;
    case 59:
        switch (a_1) {
        case 0:
            return 831;
        case 1:
            return 832;
        case 2:
            return 833;
        }
        return -1;
    case 60:
        switch (a_1) {
        case 0:
            return 834;
        case 1:
            return 835;
        case 2:
            return 836;
        }
        return -1;
    case 61:
        switch (a_1) {
        case 0:
            return 837;
        case 1:
            return 838;
        case 2:
            return 839;
        }
        return -1;
    case 62:
        switch (a_1) {
        case 0:
            return 840;
        case 1:
            return 841;
        case 2:
            return 842;
        }
        return -1;
    case 24:
        switch (a_1) {
        case 0:
            return 843;
        case 1:
            return 844;
        case 2:
            return 845;
        }
        return -1;
    }
    return -1;
}

auto sub_8220(auto a_0, auto a_1) {
    switch (a_1) {
    case 1:
        return g_14133[a_0/*34*/]._f10;
        break;
    case 7:
        return sub_825b(a_0);
        break;
    default:
        break;
    }
    return 0;
}

auto sub_825b(auto a_0) {
    switch (a_0) {
    case 2:
        return 2;
    case 3:
        return 2;
    case 5:
        return 2;
    case 6:
        return 2;
    case 8:
        return 1;
    case 12:
        return 1;
    case 14:
        return 2;
    case 16:
        return 2;
    case 17:
        return 3;
    case 18:
        return 2;
    case 19:
        return 2;
    case 20:
        return 1;
    case 21:
        return 1;
    case 22:
        return 2;
    case 23:
        return 1;
    case 25:
        return 3;
    case 26:
        return 2;
    case 28:
        return 2;
    case 29:
        return 2;
    case 30:
        return 2;
    case 32:
        return 2;
    }
    switch (a_0) {
    case 33:
        return 3;
    case 34:
        return 2;
    case 38:
        return 2;
    case 39:
        return 2;
    case 40:
        return 1;
    case 41:
        return 3;
    case 42:
        return 3;
    case 43:
        return 2;
    case 46:
        return 2;
    case 47:
        return 2;
    case 49:
        return 2;
    case 50:
        return 2;
    case 51:
        return 1;
    case 57:
        return 3;
    case 58:
        return 3;
    case 59:
        return 3;
    case 60:
        return 3;
    case 61:
        return 3;
    case 62:
        return 3;
    case 24:
        return 3;
    }
    return 0;
}

auto sub_840c(auto a_0, auto a_1) {
    switch (a_1) {
    case 1:
        return !GAMEPLAY::IS_BIT_SET(g_14133[a_0/*34*/]._fF, 5);
        break;
    case 7:
        return sub_844d(a_0);
        break;
    default:
        break;
    }
    return 0;
}

auto sub_844d(auto a_0) {
    switch (a_0) {
    case 0:
        return 0;
        break;
    case 1:
        return 0;
        break;
    case 2:
        return 1;
        break;
    case 3:
        return 1;
        break;
    case 4:
        return 0;
        break;
    case 5:
        return 1;
        break;
    case 6:
        return 1;
        break;
    case 7:
        return 0;
        break;
    case 8:
        return 1;
        break;
    case 9:
        return 0;
        break;
    case 10:
        return 0;
        break;
    case 11:
        return 0;
        break;
    case 12:
        return 1;
        break;
    case 13:
        return 0;
        break;
    case 14:
        return 1;
        break;
    case 15:
        return 0;
        break;
    case 16:
        return 1;
        break;
    case 17:
        return 1;
        break;
    case 18:
        return 1;
        break;
    case 19:
        return 1;
        break;
    case 20:
        return 1;
        break;
    case 21:
        return 1;
        break;
    case 22:
        return 1;
        break;
    case 23:
        return 1;
        break;
    case 24:
        return 1;
        break;
    case 25:
        return 1;
        break;
    case 26:
        return 1;
        break;
    case 27:
        return 0;
        break;
    case 28:
        return 1;
        break;
    case 29:
        return 1;
        break;
    case 30:
        return 1;
        break;
    case 31:
        return 0;
        break;
    case 32:
        return 1;
        break;
    case 33:
        return 1;
        break;
    case 34:
        return 1;
        break;
    case 35:
        return 0;
        break;
    case 36:
        return 0;
        break;
    case 37:
        return 0;
        break;
    case 38:
        return 1;
        break;
    case 39:
        return 1;
        break;
    case 40:
        return 1;
        break;
    case 41:
        return 1;
        break;
    case 42:
        return 1;
        break;
    case 43:
        return 1;
        break;
    case 44:
        return 0;
        break;
    case 45:
        return 0;
        break;
    case 46:
        return 1;
        break;
    case 47:
        return 1;
        break;
    case 48:
        return 0;
        break;
    case 49:
        return 1;
        break;
    case 50:
        return 1;
        break;
    case 51:
        return 1;
        break;
    case 52:
        return 1;
        break;
    case 54:
        return 1;
        break;
    case 55:
        return 1;
        break;
    case 56:
        return 1;
        break;
    case 53:
        return 1;
        break;
    case 57:
        return 1;
        break;
    case 58:
        return 1;
        break;
    case 59:
        return 1;
        break;
    case 60:
        return 1;
        break;
    case 61:
        return 1;
        break;
    case 62:
        return 1;
        break;
    default:
        break;
    }
    return 0;
}

auto sub_8793(auto a_0) {
    v_6 = 0;
    v_7 = 0;
    if (a_0) {}
    for (v_3 = 0; v_3 < game_state._f1E27._f14A; v_3 += 1) {
        if ((game_state._f1E27._f14A[v_3/*6*/]._f3 != -1) && sub_840c(v_3, 1)) {
            v_6 = 0;
            v_7 = 0;
            v_B = -1;
            for (v_8 = 0; v_8 < sub_8220(v_3, 1); v_8 += 1) {
                v_A = sub_7af7(v_3, 1, v_8);
                if (!g_DA4C[v_A/*13*/]._f7) {
                    if (sub_79e1(v_A) == 1) {
                        v_7 += 1;
                    }
                    switch (v_A) {
                    case 42:
                    case 55:
                    case 70:
                    case 85:
                    case 101:
                        v_B = sub_88ad(v_A);
                        if (v_B >= 0x7fffffff) {
                            v_B = 1;
                        }
                        break;
                    }
                    v_6 += 1;
                }
            }
            v_9 = sub_7982(v_7, v_6, 0);
            v_5 = sub_794d(v_9);
            if (v_B > -1) {
                v_5 = v_B;
            }
            if ((v_9 >= 100.0) || (v_5 == 3)) {
                v_4 += 1;
            }
        }
    }
    if (a_0) {}
    return v_4;
}

auto sub_88ad(auto a_0) {
    v_3 = sub_7ace(g_DA4C[a_0/*13*/]._f4);
    if (v_3 > -2) {
        return v_3;
    }
    return 0;
}

void sub_88d2() {
    ENTITY::IS_ENTITY_DEAD(PLAYER::PLAYER_PED_ID());
    if (!ENTITY::IS_ENTITY_IN_WATER(PLAYER::PLAYER_PED_ID())) {
        return ;
    }
    if (ENTITY::IS_ENTITY_PLAYING_ANIM(PLAYER::PLAYER_PED_ID(), "creatures@shark@move", "attack_player", 3)) {
        sub_75c7(25, 1);
        return ;
    }
    if (ENTITY::IS_ENTITY_DEAD(PLAYER::PLAYER_PED_ID())) {
        v_2 = PED::_GET_PED_KILLER(PLAYER::PLAYER_PED_ID());
        if (ENTITY::IS_ENTITY_A_PED(v_2)) {
            v_3 = ENTITY::GET_PED_INDEX_FROM_ENTITY_INDEX(v_2);
            if (sub_8959(v_3)) {
                if (ENTITY::GET_ENTITY_MODEL(v_3) == ${a_c_sharktiger}) {
                    sub_75c7(25, 1);
                    return ;
                }
            }
        }
    }
}

auto sub_8959(auto a_0) {
    if (!ENTITY::DOES_ENTITY_EXIST(a_0)) {
        return 0;
    }
    return !ENTITY::IS_ENTITY_DEAD(a_0);
}

void sub_8976() {
    switch (l_39) {
    case 0:
        l_41 = 0.0;
        if (!ENTITY::DOES_ENTITY_EXIST(PLAYER::PLAYER_PED_ID())) {
            return ;
        }
        if (ENTITY::IS_ENTITY_DEAD(PLAYER::PLAYER_PED_ID())) {
            return ;
        }
        if ((PLAYER::GET_PLAYER_WANTED_LEVEL(PLAYER::PLAYER_ID()) >= 3) && (GAMEPLAY::GET_MISSION_FLAG() == 0)) {
            if (sub_8b2c() == 2) {
                sub_8c98(&l_3C);
                l_39 += 1;
            }
        }
        break;
    case 1:
        if (sub_8b10() || STREAMING::IS_PLAYER_SWITCH_IN_PROGRESS()) {
            return ;
        }
        if (PLAYER::GET_PLAYER_WANTED_LEVEL(PLAYER::PLAYER_ID()) < 3) {
            sub_8afa(&l_3C);
            l_39 = 0;
            return ;
        }
        if (GAMEPLAY::GET_MISSION_FLAG() == 1) {
            sub_8afa(&l_3C);
            l_39 = 0;
            return ;
        }
        if (sub_8b2c() < 2) {
            sub_8afa(&l_3C);
            l_39 = 0;
            return ;
        }
        if (ENTITY::IS_ENTITY_DEAD(PLAYER::PLAYER_PED_ID())) {
            sub_8afa(&l_3C);
            l_39 = 0;
            return ;
        }
        l_41 = sub_8abe(&l_3C);
        if (l_41 >= 180.0) {
            sub_75c7(24, 1);
            sub_8a84(&l_3C);
            l_39 += 1;
        }
        break;
    case 2:
        l_39 += 1;
        break;
    }
}

void sub_8a84(auto a_0) {
    if (sub_6d24(a_0)) {
        if (!sub_6d14(a_0)) {
            a_0._f2 = sub_6ccc(GAMEPLAY::IS_BIT_SET(a_0, 4)) - a_0._f1;
            GAMEPLAY::SET_BIT(a_0, 2);
        }
    } else { }
}

auto sub_8abe(auto a_0) {
    if (sub_6d24(a_0)) {
        if (sub_6d14(a_0)) {
            return a_0._f2;
        } else { 
            return sub_6ccc(GAMEPLAY::IS_BIT_SET(a_0, 4)) - a_0._f1;
        }
    } else { 
        return 0.0;
    }
}

void sub_8afa(auto a_0) {
    a_0._f1 = 0.0;
    a_0._f2 = 0.0;
    a_0 = 0;
}

auto sub_8b10() {
    if (!NETWORK::NETWORK_IS_GAME_IN_PROGRESS()) {
        return g_15B55._f2C == 1;
    }
    return 0;
}

auto sub_8b2c() {
    v_2 = 0;
    v_3 = sub_8c07(2);
    if (sub_8bab(v_3, 0) || GAMEPLAY::IS_BIT_SET(g_154FA, 2)) {
        v_2 += 1;
    }
    v_3 = sub_8c07(1);
    if (sub_8bab(v_3, 0) || GAMEPLAY::IS_BIT_SET(g_154FA, 1)) {
        v_2 += 1;
    }
    v_3 = sub_8c07(0);
    if (sub_8bab(v_3, 0) || GAMEPLAY::IS_BIT_SET(g_154FA, 0)) {
        v_2 += 1;
    }
    return v_2;
}

auto sub_8bab(auto a_0, auto a_1) {
    return 0;
    if (!PED::IS_PED_INJURED(a_0)) {
        v_4 = sub_48aa(a_0);
        if (v_4 > 3) {
            return 0;
        }
        if (sub_8c07(v_4) != a_0) {
            return 0;
        }
        if (a_1 == 0) {
            if (a_0 == PLAYER::PLAYER_PED_ID()) {
                return 0;
            }
        }
        if (GAMEPLAY::IS_BIT_SET(g_154FC, v_4)) {
            return 1;
        }
    }
    return 0;
}

auto sub_8c07(auto a_0) {
    if (a_0 > 3) {
        return 0;
    }
    if (a_0 == sub_4794()) {
        return PLAYER::PLAYER_PED_ID();
    } else { 
        return g_15B55[sub_8c38(a_0)/*1*/];
    }
}

auto sub_8c38(auto a_0) {
    if (a_0 == 0) {
        return 0;
    } else if (a_0 == 2) {
        return 2;
    } else if (a_0 == 1) {
        return 1;
    } else if (a_0 == 145) {
        return 3;
    }
    return 4;
}

auto sub_8c73(auto a_0) {
    return g_8B74 == a_0;
}

void sub_8c81(auto a_0, auto a_1) {
    UI::_SET_TEXT_COMPONENT_FORMAT(a_0);
    UI::_DISPLAY_HELP_TEXT_FROM_STRING_LABEL(0, 0, 1, a_1);
}

void sub_8c98(auto a_0) {
    sub_8ca7(a_0, 0.0);
}

void sub_8ca7(auto a_0, auto a_1) {
    a_0._f1 = sub_6ccc(GAMEPLAY::IS_BIT_SET(a_0, 4)) - a_1;
    GAMEPLAY::SET_BIT(a_0, 1);
    GAMEPLAY::CLEAR_BIT(a_0, 2);
    a_0._f2 = 0.0;
}

void sub_8cd5(auto a_0, auto a_1) {
    a_0._f47 = a_1;
    if (a_0._f47) {
        sub_7059(a_0, 0);
    }
}

void sub_8cf1(auto a_0) {
    for (v_3 = 0; v_3 < a_0; v_3 += 1) {
        sub_8d25(a_0, v_3);
    }
    sub_7059(a_0, g_270EC9 - 0.5);
}

void sub_8d25(auto a_0, auto a_1) {
    a_0[a_1/*1*/] = 70;
}

void sub_8d35() {
    v_3 = 70;
    for (v_2 = 1; v_2 <= (v_3 - 1); v_2 += 1) {
        if (PLAYER::HAS_ACHIEVEMENT_BEEN_PASSED(v_2)) {}
    }
}

void sub_8d5f(auto a_0) {
    if (a_0 > 0) {}
}